{
  "hash": "f33409bb745b82a05f8a77fd94816c47",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  revealjs:\n    css: style.css\n    theme: simple\n    slide-number: true\n    preview-links: auto\nexecute:\n  echo: true\nkeywords: [\"software-engineering\", \"r-packages\", \"best-practices\", \"CRAN\"]\n---\n\n\n\n## Preventive Care for R Packages {style=\"text-align: center;\"}\n\n<!-- Don't render this file manually. Run `renderer.R` script instead. -->\n\n::: {style=\"text-align: center;\"}\n\nIndrajeet Patil\n\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/preventive-care.png){width=507}\n:::\n:::\n\n\n\n\n<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->\n<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->\n\n# \"Software engineering ought to produce sustainability.\" \n\\- Mark Seemann (*Code That Fits in Your Head*)\n\n# Target audience {.smaller}\n\nAs an R package developer, if you ever lay awake in the bed wondering:\n\n- if the users are having a bad experience while using the package,\n- if you will receive the dreaded CRAN email about archival, and\n- if you will be able to update the package in time,\n\nthen this presentation is for you! 😊\n\n# Before we begin\n\nDon't miss the forest for the trees.\n\n## {.smaller}\n\n:::{.callout-important}\n\n## It's not about the tools\n\nI will rely heavily on GitHub as the hosting platform and GitHub Actions as the CI/CD framework. Even if you use neither, the broader takeaways should still be relevant. You can implement the necessary checks with preferred tech stack.\n\n:::\n\n<br>\n\n:::{.callout-note}\n\n## It's not *just* about CRAN\n\nFollowing the recommended practices will make packages more robust to CRAN checks, but that benefit is *incidental*. You can follow these practices even if you never plan to submit to CRAN. The goal here is to improve user experience and reduce maintenance workload.\n\n:::\n\n<br>\n\n:::{.callout-tip}\n\n## It's not even about R\n\nThe practices outlined here are just as relevant to software development in any other programming language (just replace the package with module/library/etc.).\n\n:::\n\n## Iconography {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='15%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='35%'}\n\n<br>\nOverarching goal\n\n:::\n\n::: {.column width='15%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='35%'}\n\n<br>\nProblem to solve\n\n:::\n\n::::\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='15%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='35%'}\n\n<br>\nBad user experience\n\n:::\n\n::: {.column width='15%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='35%'}\n\n<br>\nMaintenance headaches\n\n:::\n\n::::\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='15%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='35%'}\n\n<br>\nTools\n\n:::\n\n::: {.column width='15%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='35%'}\n\n<br>\nAutomation\n\n:::\n\n::::\n\n# Digging the pit of success\n\nHow can software engineering improve sustainability\n\n## Be always release-ready {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='70%'}\n\nBased on research, *Accelerate* (Forsgren, Humble, & Kim, 2018) argues that the key difference between high-performing vs low-performing software teams is *the ability to make a release at the drop of a hat*.\n\nFor R packages, this translates to making sure that every commit on the `main`-branch is **release-ready**. \n\nThat is, if you were asked to make a new release soon, you can be confident that the latest commit doesn't have any documentation issues, code quality issues, performance regressions, etc.\n\n:::\n\n::: {.column width='30%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/accelerate.jpg){width=70%}\n:::\n:::\n\n\n\n:::\n\n::::\n\n. . . \n\n<br>\n\n\n:::{style=\"background-color: #F3CCFF; padding: 20px; border-radius: 25px; text-align: center;\"}\n\nHow can software engineering help to achieve this goal?\n\n:::\n\n## Fighting software entropy {.smaller}\n\nThe biggest reason why a software project becomes unsustainable is the unchecked accumulation of complexity.\n\n. . . \n\n:::: {.columns}\n\n::: {.column width='20%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/engineer.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='80%'}\n\n**Software engineering is the active and conscious process of preventing complexity from growing.**\n\nIt provides the methodology to make sure that the software works as intended and to ensure that it stays that way.\n\n:::\n\n::::\n\n. . . \n\n:::{style=\"font-size: 25px;\"}\n\n:::: {.columns}\n\n::: {.column width='20%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/checklist.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='80%'}\n\nSoftware development is an inherently complex process. To make it more manageable, we break it down into checklists of best practices—each designed to stave off complexity—so that we don't forget about them.\n\nFollowing each item on a checklist is a small improvement, but constantly keeping an eye on internal quality prevents software entropy from growing. Although software engineering is more than about automating this process, automation is undoubtedly an important part of it.\n\n:::\n\n::::\n\n:::\n\n# \"The only way to go fast, is to go well.\"\n\\- Robert C. Martin\n\n# R package development\n\nUsing automation to tick checklists for various aspects of package development.\n\n## Plan\n\nFirst, you will see the checklists to tick, and then the details on how to build infrastructure to ensure that none of the checklist items are forgotten.\n\n- [Documentation](#documentation) \n\n- [Exception handling](#warnings)\n\n- [Portability](#portability)\n\n- [Code quality](#codequality)\n\n- [Dependency management](#dependency)\n\n## Checklist for documentation {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**For a good user experience, make sure that the docs are plentiful, valid, and up-to-date.**\n\n:::\n\n:::\n\n::::\n\n| Item                                                      |\n| :-------------------------------------------------------- |\n| Make sure there are enough examples in the documentation. |\n| Make sure all README examples are working.                |\n| Make sure all examples in help pages are working.         |\n| Make sure examples in vignettes are working.              |\n| Make sure all URLs are valid.                             |\n| Make sure there are no spelling mistakes.                 |\n| Make sure all HTML in the help pages is valid.            |\n\n## Checklist for exception handling {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that warnings are easily detected for further scrutiny and forthright dealt with.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                                     |\n| :------------------------------------------------------- |\n| Make sure examples in README produce no warnings.        |\n| Make sure examples in help pages produce no warnings.    |\n| Make sure examples in vignettes produce no warnings.     |\n| Make sure tests produce no extrinsic warnings.           |\n\n## Checklist for portability {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**For a good user experience, make sure that package would work as expected across diverse settings.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                                         |\n| :----------------------------------------------------------- |\n| Make sure package passes checks on commonly used OS.         |\n| Make sure package passes checks on all supported R versions. |\n| ...                                                          |\n\n::: aside\n\nThe items on this list will vary significantly from package to package (e.g., does it work in different locales, with different compilers, etc.). Extend the list for your workflow!\n\n:::\n\n## Checklist for code quality {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that the code is readable, maintainable, and follows agreed conventions.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                              |\n| :------------------------------------------------ |\n| Make sure the code follows a style guide.         |\n| Make sure there are no known code quality issues. |\n| Make sure there are no performance regressions.   |\n\n## Checklist for dependency management {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that the package is robust to availability of soft dependencies and breaking changes in hard dependencies.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                                                              |\n| :-------------------------------------------------------------------------------- |\n| Make sure examples in help pages are run conditionally.                           |\n| Make sure vignettes (or code chunks therein) are executed conditionally.          |\n| Make sure tests are run conditionally.                                            |\n| Make sure excluded vignettes (or code chunks therein) are executed conditionally. |\n| Anticipate possible breaking changes coming from dependencies and act on it.      |\n\n# Documentation {#documentation}\n\nPreventive care to make sure the docs are up-to-date.\n\n# \"Incorrect documentation is often worse than no documentation.\"\n\\- Bertrand Meyer\n\n#\n\n<!-- column layout -->\n\n:::::{style=\"background-color: #A9F5A9; padding: 20px; border-radius: 25px;\"}\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**For a good user experience, make sure that the docs are plentiful, valid, and up-to-date.**\n\n:::\n\n:::\n\n::::\n\n:::::\n\n# Make sure there are enough examples in the documentation.\n\n## An example is worth a thousand words {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/research.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nAccess to abundant examples in help pages and vignettes provides a natural starting point for users to explore and experiment with the available functionality. \n\nGood examples are difficult to write, but any examples are better than none.\n\n:::\n\n::::\n\n<br>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nWithout enough expository examples, users are left to fumble their way into discovering the available functionality.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to ensure that there are *enough* number of examples?**\n\n:::\n\n:::\n\n::::\n\n## Sources of documentation {.smaller}\n\nThere are three types of documents that constitute package documentation.\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='30%'}\n\n:::{style=\"text-align: center;\"}\n\n**README.md**\n\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/readme.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='5%'}\n\n:::\n\n::: {.column width='30%'}\n\n:::{style=\"text-align: center;\"}\n\n**Help pages**\n\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/example.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='5%'}\n\n:::\n\n::: {.column width='30%'}\n\n:::{style=\"text-align: center;\"}\n\n**Vignettes**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/application.png){width=256}\n:::\n:::\n\n\n\n:::\n\n:::\n\n::::\n\n<br>\n\nTherefore, we want to make sure that, when combined across these sources, there are enough examples to cover a significant proportion of available functionality.\n\n## Maintaining example code coverage {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='9%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='91%'}\n\nUse [`{covr}`](https://covr.r-lib.org/){target='_blank'} to compute example code coverage (i.e. proportion of the source code that is executed when running examples in help pages and vignettes), and to ensure that it is above a certain threshold.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\npackage_coverage(type = c(\"examples\", \"vignettes\"), commentDonttest = FALSE, commentDontrun = FALSE)\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='9%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='91%'}\n\nUse a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/test-coverage-examples.yaml){target='_blank'} to automate checking that the code coverage via examples never drops below the chosen threshold.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- The choice of threshold is subjective and context-sensitive. Chasing after 100% example code coverage is futile (since this would require exposing every exception in the examples).\n\n- The examples not run or tested on CRAN can still be counted for computing code coverage.\n\n- Vignettes not included in the package (the ones in `vignettes/` subdirectory or `.Rbuildignore`) will not contribute towards the code coverage. Ditto for `README`. You can adjust the threshold accordingly.\n\n- You could also choose the threshold on a file basis (`covr::file_coverage()`).\n\n:::\n\n# Make sure all README examples are working.\n\n## README documentation {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/readme.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n`README.md` provides a quick overview of the package API and can feature examples of key functions. \n\nAlthough breaking changes might be infrequent, when they do occur, the code in README may become defunct.\n\n:::\n\n::::\n\n<br>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n`README.md` is probably the first and the most-visited document in a project and any broken examples therein are bound to confuse many users.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to insure against broken code in README?**\n\n:::\n\n:::\n\n::::\n\n## Detecting broken README examples {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [`{rmarkdown}`](https://rmarkdown.rstudio.com/github_document_format.html) to dynamically generate `README.md` from `README.Rmd`. If there is broken code in README, it will fail to render.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nrmarkdown::render(\"README.Rmd\", output_format = rmarkdown::github_document())\n```\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-readme.yaml){target='_blank'} to automate checking that README can be successfully rendered on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- If you are starting a new project, create README using [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html).\n\n- If you need to convert an existing `.md` to `.Rmd`, you are [currently](https://github.com/yihui/knitr/issues/1807) out of luck. You will need to do this manually.\n\n- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule){target='_blank'} (e.g. once a week).\n\n:::\n\n# Make sure *all* examples in help pages are working.\n\n## Broken examples in help pages {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/example.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{.callout-note}\n\n## Types of examples\n\nHelp pages for exported functions should contain examples illustrating their usage. But you can skip executing some examples (e.g. because they are too time-consuming) using any of the following tags:\n\n|      Tag      | Run by `example()`? | Run by `R CMD check`? |\n| :-----------: | :-----------------: | :-------------------: |\n| `\\dontrun{}`  |         ❌          |          ❌           |\n| `\\donttest{}` |         ✅          |          ❌           |\n| `\\dontshow{}` |         ✅          |          ✅           |\n\n:::\n\n:::\n\n::::\n\n. . . \n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nThus, broken `\\dontrun{}` and `\\donttest{}` examples may not be flagged by `R CMD check`. Users will still see these examples, and wonder why they aren't working for them.\n\n:::{style=\"font-size: 20px;\"}\n\nCRAN's additional [\"donttest\" check](https://www.stats.ox.ac.uk/pub/bdr/donttest/){target='_blank'} does run `\\donttest{}` examples.\n\n:::\n\n:::\n\n::::\n\n. . . \n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to catch examples that don't run successfully?**\n\n:::\n\n:::\n\n::::\n\n## Checking all examples {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [`{devtools}`](https://r-lib.github.io/devtools/){target='_blank'} to run all examples, and catch and fix the broken ones.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndevtools::run_examples(run_dontrun = TRUE, run_donttest = TRUE)\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-all-examples.yaml){target='_blank'} to make sure all examples in help pages are working on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- Examples that are *meant* to fail should use any of the following patterns:\n\n    * `if (FALSE) { ... }` (if example is included only for illustrative purposes)\n    * `try({ ... })` (if the intent is to display the error message)\n\n- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger){target='_blank'}  (e.g. once a week).\n\n:::\n\n# Make sure examples in *all* vignettes are working.\n\n## Vignette examples {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/application.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{.callout-note}\n\n## Types of vignettes\n\nVignettes included in the package will fail if examples are broken. But you can choose to exclude some vignettes to reduce package size or to reduce check time. You can do so by placing them in a `vignettes/` subdirectory or by adding them to `.Rbuildignore`.\n\n:::\n\n:::\n\n::::\n\n<br>\n\n. . . \n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nThus, the `R CMD check` won't catch broken examples in excluded vignettes. Although users might not see them on CRAN, you shouldn't retain defunct examples anywhere in the documentation. This also makes excluded vignettes future-proof; if you decide to include them in the package, there won't be any issues.\n\n:::\n\n::::\n\n. . . \n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to detect broken examples in excluded vignettes?**\n\n:::\n\n:::\n\n::::\n\n## Building all vignettes {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nAlthough excluded vignettes may not be checked by `R CMD check`, they are still built by [`{pkgdown}`](https://r-lib.github.io/pkgdown/) to generate a static website. Thus, building a website would detect any broken examples in excluded vignettes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\npkgdown::build_site()\n```\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse a [GHA workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/pkgdown.yaml){target='_blank'} to make sure examples in *all* vignettes are working on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- Code chunks that are *meant* to fail should use `error=TRUE` option.\n\n- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule){target='_blank'} (e.g. once a week).\n\n:::\n\n# Make sure *all* URLs are valid.\n\n## What is link rot? {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n{{< fa solid link-slash size=2xl >}}\n\n\n\n\n:::\n\n::: {.column width='90%'}\n\nPackage documentation often includes plenty of hyperlinks to external resources. But some of them may become invalid over time.\n\n[Link rot](https://en.wikipedia.org/wiki/Link_rot){target='_blank'} happens because web pages move to new addresses or become permanently unavailable.\n\n:::\n\n:::: \n\n. . . \n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nSuch dangling references can be frustrating for the users trying to access the resources that the dead links were previously pointing to.\n\n:::\n\n::::\n\n. . . \n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to prevent link rot from accumulating in the documentation?**\n\n:::\n\n:::\n\n::::\n\n## Detecting link rot {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nYou can use [`{urlchecker}`](https://r-lib.github.io/urlchecker/){target='_blank'} to detect dead web references and their locations in the documentation. Fixing these links is then straightforward.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nurlchecker::url_check()\n```\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-link-rot.yaml){target='_blank'} to check for bad URLs on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- If `{urlchecker}` finds dead URLs in `.html`/`.md` files, you will need to update `.Rmd`/`.qmd` files and then regenerate the docs. Otherwise, you will keep wondering why `urlchecker::url_update()` isn't fixing the links.\n\n- There can be false positives sometimes because a server is temporarily down. Re-triggering the workflow can help. If false positives persist, you may decide to not mark builds as failed if any broken links are found.\n\n- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).\n\n:::\n\n# Make sure there are no spelling mistakes.\n\n## Spelling mistakes {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/spell-check.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nSpelling mistakes are inevitable and, if left unchecked, they can accumulate rapidly with the increase in the documentation.\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nSpelling mistakes obvious to native speakers may not be so for non-native speakers, who will be frustrated that they can't find the meaning of the misspelt word. \n\nAdditionally, misspelling technical words (e.g. *innode* vs. [*inode*](https://en.wikipedia.org/wiki/Inode){target='_blank'}) can lead users down the wrong path and waste their time. \n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to prevent spelling mistakes from accumulating in the documentation?**\n\n:::\n\n:::\n\n::::\n\n## Creating a list of allowed misspellings {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='70%'}\n\nThere exist multiple English spelling standards (e.g. in British English: *anaemia*, but in American English: *anemia*). You can specify your preferred standard in `DESCRIPTION`.\n\n:::\n\n::: {.column width='30%'}\n\nE.g. for British English\n\n```dcf\nLanguage: en-GB\n```\n\n:::\n\n::::\n\n. . . \n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='60%'}\n\nAdditionally, some technical words will not be recognized by dictionaries, but you don't want these to be considered spelling mistakes either. You can create a list of allowed misspelt words in the `WORDLIST` file.\n\n:::\n\n::: {.column width='20%'}\n\nFile location\n\n```\n├── DESCRIPTION\n├── inst\n│   └── WORDLIST\n```\n\n:::\n\n::: {.column width='20%'}\n\nExample file\n\n```\naddin\napi\nAppVeyor\nbiocthis\nbootswatch\n...\nwinbuilder\nYAML\n```\n\n:::\n\n::::\n\n. . . \n\n<br>\n\nNow you are all set for detecting spelling mistakes!\n\n## Detecting spelling mistakes {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [`{spelling}`](https://docs.ropensci.org/spelling/){target='_blank'} to detect misspelt words and their location in the docs.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nspelling::spell_check_package()\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-spelling.yaml){target='_blank'} to ensure that spelling mistakes are caught on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- Instead of a GHA workflow, you can also include spell check tests in the package itself. For more, see `usethis::use_spell_check()`.\n\n- If you install [Grammarly desktop](https://www.grammarly.com/desktop), it will flag spelling mistakes and will even suggest a clearer way to phrase your sentences. For VS Code, check out [Grammarly extension](https://marketplace.visualstudio.com/items?itemName=znck.grammarly).\n\n- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).\n\n:::\n\n# Make sure *all* HTML in the help pages is valid.\n\n## HTML5 check {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/html-5.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nHTML has few syntactic rules, and browsers may not even enforce the rules it does have. E.g., browsers will tolerate mismatched tags, missing end tags, misnested tags, etc. HTML5 standard aims to improve this situation, and R package help pages use HTML5 standard since `R 4.2`.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nYou will thus need to make sure that your package documentation neither generates invalid HTML nor contains raw invalid HTML.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to make sure help pages have valid HTML?**\n\n:::\n\n:::\n\n::::\n\n## Detecting invalid HTML {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nCRAN uses [HTML tidy](https://www.html-tidy.org/documentation/) to detect markup errors in HTML. But, if you use [`{roxygen2}`](https://roxygen2.r-lib.org/){target='_blank'}, it will ensure against producing any invalid HTML.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nroxygen2::roxygenise()\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/html-5-check.yaml){target='_blank'} to automate checking validity of HTML manual on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- If your documentation contains math equations, have a look at [`{katex}`](https://docs.ropensci.org/katex/reference/katex.html){target='_blank'}, [`{mathjaxr}`](https://CRAN.R-project.org/package=mathjaxr){target='_blank'},  [`{mathml}`](https://CRAN.R-project.org/package=mathml){target='_blank'}, etc. to convert LaTeX math expressions to HTML for use in package help pages.\n\n- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).\n\n:::\n\n## Checklist for documentation {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**For a good user experience, make sure that the docs are plentiful, valid, and up-to-date.**\n\n:::\n\n:::\n\n::::\n\n| Item                                                      |\n| :-------------------------------------------------------- |\n| Make sure there are enough examples in the documentation. |\n| Make sure all README examples are working.                |\n| Make sure all examples in help pages are working.         |\n| Make sure examples in vignettes are working.              |\n| Make sure all URLs are valid.                             |\n| Make sure there are no spelling mistakes.                 |\n| Make sure all HTML in the help pages is valid.            |\n\n# Exception handling {#warnings}\n\nPreventive care to make sure that you don't miss out on important warnings.\n\n# \"There is a problem with warnings. No one reads them.\" \n\\- Patrick Burns\n\n#\n\n<!-- column layout -->\n\n:::::{style=\"background-color: #A9F5A9; padding: 20px; border-radius: 25px;\"}\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that warnings are easily detected for further scrutiny and forthright dealt with.**\n\n:::\n\n:::\n\n::::\n\n:::::\n\n## Sending signals {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/warning.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{.callout-note}\n\n## Types of conditions/exceptions\n\nA function can use [conditions](https://adv-r.hadley.nz/conditions.html) to signal that something unexpected has happened with varying severity.\n\n| Condition | Severity |                         Meaning                          |\n| :-------: | :------: | :------------------------------------------------------: |\n|  `error`  |   high   |  execution stopped because there was no way to continue  |\n| `warning` |  medium  |     execution encountered some problem but recovered     |\n| `message` |   low    | execution was successful and here are some extra details |\n\n:::\n\n:::\n\n::::\n\nOut of these, warnings are the most nebulous! \n\n- Errors bring functions to a halt and you *must* attend to them. \n- Messages are innocuous and you *can* safely ignore them. \n- But warnings are harbingers of problems that you will need to fix at some point. They *need* to be dealt with, *pronto*, and yet it is easy to ignore them.\n\n## A needle in the haystack {.smaller}\n\n:::{.callout-note}\n\n## Types of warnings\n\nThere are two kinds of warnings that you, as a developer, will need to deal with:\n\n:::: {.columns}\n\n::: {.column width='45%'}\n\n**Intrinsic warnings** are warnings produced by functions in *your* package.\n\nE.g. a warning from a function to winsorize data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nwinsorize(x, threshold = 2)\n#> Warning message:\n#> `threshold` for winsorization must be a scalar between 0 and 0.5.\n```\n:::\n\n\n\n:::\n\n::: {.column width='55%'}\n\n**Extrinsic warnings** are warnings stemming from your package *dependencies*.\n\nE.g. a possible [warning](https://github.com/jtlandis/ggside/issues/39){target='_blank'} if your package relies on `{ggside}`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(mpg, aes(hwy, class)) + geom_xsidedensity()\n#> Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n\n\n:::\n\n::::\n\n:::\n\n. . . \n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/cleaning.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nWith a significant amount of package functionality and dependencies, there can be plenty of warnings at any given moment.\n\nTo avoid missing out on important warnings, there should ideally be **zero of either type of warnings** in your package documentation and tests. This makes it easy to notice and deal with new, potentially critical warnings as they appear.\n\n:::\n\n::::\n\n## Suppressing intrinsic warnings {.smaller}\n\nThere is almost never a need to explicitly highlight warnings intrinsic to your package.\n\n. . .\n\n::: {style=\"background-color: #FFDCA9; padding: 20px; border-radius: 25px;\"}\n\n- Warnings are generated in contexts where functions in *your* package were used unexpectedly by the users. But such contexts shouldn't be deliberately highlighted in the documentation. Users should always see [happy path](https://en.wikipedia.org/wiki/Happy_path){target='_blank'} examples in help pages, README, or vignettes.\n\n- While testing functions, you should use expectations (e.g. `testthat::expect_warning()`) to check that expected warnings are triggered. You shouldn't print the warnings, since they can completely overwhelm the test log and make it difficult to catch important warnings.\n\n- If it's a complex package function that can encounter a large number of slippery situations, it makes sense to provide an argument to turn off a few warnings (e.g. `verbose = FALSE`) and use it to omit warnings in the docs.\n\n:::\n\n## Suppressing extrinsic warnings {.smaller}\n\nWarnings from dependencies can be critical and should be dealt with ASAP.\n\n. . .\n\n::: {style=\"background-color: #FFFBC1; padding: 20px; border-radius: 25px;\"}\n\n- If dependencies are emitting warnings because your functions are using imported code in unexpected ways, rewrite functions to remove warnings.\n\n- If the warnings are about deprecated functions or arguments, switch to using the suggested alternatives. Don't wait until they are removed.\n\n- Some warnings are unavoidable and not as important. They can be suppressed using `suppressWarnings()`. That said, avoid using it in examples in help pages, lest users think that this is part of *your* package API.\n\n- If the warnings are coming from somewhere upstream (e.g. `{ggplot2}` → `{ggside}` → your package), you have little control over them. You can inform the upstream maintainer and ignore such warnings using `suppressWarnings()`. Don't forget to remove suppress calls once the warnings are fixed upstream.\n\n:::\n\n## Detecting warnings {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nConvert warnings into errors during checks to detect warnings.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\noptions(warn = 2L)\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse GHA workflows to automate checking presence of warnings in [help pages](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/test-coverage-examples.yaml){target='_blank'}, [README](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-readme.yaml){target='_blank'}, [vignettes](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-vignette-warnings.yaml){target='_blank'}, and [tests](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-test-warnings.yaml){target='_blank'} (`testthat::test_dir(\"tests\")`) on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- If a function is *designed* to show warnings, then you can prevent workflows from failing by conditionally running it.\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n#' @examplesIf getOption(\"warn\") < 2L\n#' function_showing_warning()\n```\n:::\n\n\n\n:::\n\n::: {.column width='50%'}\n\n\n\n\n````{.default}\n```{r eval = getOption(\"warn\") < 2L}\nfunction_showing_warning()\n```\n\n````\n\n\n\n:::\n\n::::\n\n- While you are at this cleanup, it might also be worth cleaning up intrinsic and extrinsic messages. They might be harmless, but they do clog up logs and make it difficult to focus on warnings.\n\n- Setting `warning=FALSE` in vignettes only suppresses warnings in the rendered output. When users run this code interactively, they will still see warnings. [Ostrich policy](https://en.wikipedia.org/wiki/Ostrich_policy){target='_blank'} never works for software development.\n\n:::\n\n## Checklist for exception handling {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that warnings are easily detected for further scrutiny and forthright dealt with.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                                     |\n| :------------------------------------------------------- |\n| Make sure examples in README produce no warnings.        |\n| Make sure examples in help pages produce no warnings.    |\n| Make sure examples in vignettes produce no warnings.     |\n| Make sure tests produce no extrinsic warnings.           |\n\n# Portability {#portability}\n\nPreventive care to make sure that your package works across a variety of settings.\n\n# \"Each new user of a new system uncovers a new class of bugs.\"\n\\- Brian Kernighan\n\n#\n\n<!-- column layout -->\n\n:::::{style=\"background-color: #A9F5A9; padding: 20px; border-radius: 25px;\"}\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**For a good user experience, make sure that package works as expected across diverse settings.**\n\n:::\n\n:::\n\n::::\n\n:::::\n\n## The unbearable diversity of contexts {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/difference.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nYou (the developer) may be developing the package in a certain setting: with a certain version of R, on a particular OS, in a certain locale, etc. Even if all tests pass and all examples run successfully for you locally, you can't assume that your users will use the package in similar settings. \n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIf you restrict your checks only to these specific settings, you may not catch problems experienced by users in other settings (e.g., the graphics device that works on `windows` may not work on `macOS`, code that works with `R 4.1` may not work with `R 3.6`, etc.).\n\n:::{style=\"font-size: 20px;\"}\n\nThe key assumption here is that your package claims to support these settings. If your package docs clearly state that the package will work only on (e.g.) Windows, you don't need to worry about other OS.\n\n:::\n\n:::\n\n::::\n\n<br>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to make sure that your package is working as expected across various settings?**\n\n:::\n\n:::\n\n::::\n\n## Checking across multiple settings {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [`{rcmdcheck}`](https://r-lib.github.io/rcmdcheck/){target='_blank'} to run `R CMD check` from R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nrcmdcheck::rcmdcheck()\n```\n:::\n\n\n\n:::{style=\"font-size: 20px;\"}\n\nAll the options you can set to further customize this check is beyond the scope of the current presentation.\n\n:::\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/r-lib/lintr/blob/main/.github/workflows/R-CMD-check.yaml){target='_blank'} to run `R CMD check` for multiple R versions and platforms on each commit to probe for potential portability issues.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- If needed, you can run checks on additional platforms using [`{rhub}`](https://r-hub.github.io/rhub/articles/rhub.html){target='_blank'}.\n\n- Fully crossed checks (all major platforms $\\times$ all supported R versions) are rarely necessary and definitely an overkill.\n\n- Ideally, the package should be tested until the oldest R version it purports to support. E.g. if `DESCRIPTION` says `R >= 3.4`, then you should check until `R 3.4` to make sure that the package indeed works for this R version. If you check only until `R 3.5`, it is instead better to bump version in `DESCRIPTION`.\n\n:::\n\n## Checklist for portability {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**For a good user experience, make sure that package would work as expected across diverse settings.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                                         |\n| :----------------------------------------------------------- |\n| Make sure package passes checks on commonly used OS.         |\n| Make sure package passes checks on all supported R versions. |\n| ...                                                          |\n\n::: aside\n\nThe items on this list will vary significantly from package to package (e.g., does it work in different locales, with different compilers, etc.). Extend it for your workflow!\n\n:::\n\n# Code quality {#codequality}\n\nPreventive care to detect code quality issues and performance regressions.\n\n# \"Don’t comment bad code—rewrite it.\"\n\\- Brian W. Kernighan\n\n#\n\n<!-- column layout -->\n\n:::::{style=\"background-color: #A9F5A9; padding: 20px; border-radius: 25px;\"}\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that the code is readable, maintainable, and follows agreed conventions.**\n\n:::\n\n:::\n\n::::\n\n:::::\n\n# Make sure the code follows a style guide.\n\n## Code formatting {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/web-programming.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nThe physical layout of the program can assist the reader in understanding the underlying logic. Additionally, understanding a large codebase is easier when all the code has consistent formatting. Style guides outline conventions to enforce a uniform formatting schema across the codebase. \n\n:::{style=\"font-size: 20px;\"}\n\nStyle guides can be highly opinionated and arbitrary. So, more important than *which* style guide you follow is the fact that you follow *a* style guide.\n\n:::\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIn larger projects or teams, multiple contributors may have different formatting preferences. This can lead to contributors undoing each others' changes, leading to unnecessarily large git diffs and even unnecessary unpleasantness.\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n<br>\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to make sure that codebase follows a consistent style guide?**\n\n:::\n\n:::\n\n::::\n\n## Following style guide {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [`{styler}`](https://r-lib.github.io/styler/){target='_blank'} to enforce the [tidyverse style guide](https://style.tidyverse.org/){target='_blank'} throughout the package (including source code, test files, vignettes, etc.).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nstyler::style_pkg()\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/style.yaml){target='_blank'} to format code consistently on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- You can use annotations (`styler: off` + `styler: on`) to instruct `{styler}` to ignore custom formatted code.\n\n- If you don't prefer the tidyverse style guide, either you can customize `{styler}` itself, or explore other packages (e.g. [`{formatR}`](https://CRAN.R-project.org/package=formatR){target='_blank'}, [`{BiocStyle}`](https://github.com/Bioconductor/BiocStyle/){target='_blank'}, etc.). For a full list, see [awesome-r-pkgtools](https://indrajeetpatil.github.io/awesome-r-pkgtools/#codedocument-formatting){target='_blank'}.\n\n:::\n\n# Make sure there are no known code quality issues.\n\n## Code quality assessment {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/tumble-dryer.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n[Code smells](https://en.wikipedia.org/wiki/Code_smell){target='_blank'} (aka lints) are patterns that are known to be problematic for readability, efficiency, consistency, style, etc. Catching such issues early on can help prevent bugs and other issues from creeping into code, which can save time and effort when it comes to debugging and testing.\n\n:::: {.columns}\n\n::: {.column width='40%'}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# code with a lint\nlint(text = \"x = 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n::warning file=<text>,line=1,col=3::file=<text>,line=1,col=3,[assignment_linter] Use <-, not =, for assignment.\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width='10%'}\n\n:::\n\n::: {.column width='40%'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# code without a lint\nlint(text = \"x <- 1\")\n```\n:::\n\n\n\n:::\n\n::::\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIn larger projects or teams, where multiple contributors may be working on the same codebase, it can become difficult for an individual contributor to detect code quality issues that they or someone else may have introduced.\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to make sure that there are no known code quality issues present?**\n\n:::\n\n:::\n\n::::\n\n## Detecting lints {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [`{lintr}`](https://r-lib.github.io/lintr/dev/){target='_blank'} to carry out static code analysis to detect code quality issues.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlintr::lint_package()\n```\n:::\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/r-lib/lintr/blob/main/.github/workflows/lint.yaml){target='_blank'} to detect all lints on each commit.\n\n:::{style=\"font-size: 20px;\"}\n\n:::: {.columns}\n\n::: {.column width='60%'}\n\nThis workflow can be overwhelming at first as it can detect thousands of lints. Therefore, **don't** error if lints are present.\n\nYou can use [another workflow](https://github.com/r-lib/lintr/blob/main/.github/workflows/lint-changed-files.yaml){target='_blank'} which fails if lints are found **only** in files that changed in a Pull Request. This is an easier and less disheartening way to clean lints.\n\n:::\n\n::: {.column width='40%'}\n\n```yaml\n# In `lint.yaml`\nenv:\n  LINTR_ERROR_ON_LINT: false\n```\n\n<br>\n\n```yaml\n# In `lint-changed-files.yaml`\nenv:\n  LINTR_ERROR_ON_LINT: true\n```\n\n:::\n\n::::\n\n:::\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- Most lints related to code formatting can be removed using [`{styler}`](https://r-lib.github.io/styler/){target='_blank'}, which enforces [tidyverse style guide](https://style.tidyverse.org/){target='_blank'}.\n\n- Code smells are subjective and you may disagree with some linters. Use a [configuration file](https://lintr.r-lib.org/dev/articles/lintr.html) to customize which linters you wish to include. Additionally, you can annotate parts of code that linters should ignore (e.g. `# nolint start: indentation_linter.` + `# nolint end`).\n\n:::\n\n## Detecting issues with non-R code {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nAn R package contains a number of configuration files written in languages other than R (e.g., YAML, JSON, DCF, etc.), and you may also wish to make sure that none of them are malformed.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nTo detect multi-language code issues, you can use [pre-commit](https://pre-commit.com/){target='_blank'}, which is a framework for managing and maintaining git hooks. This framework can be accessed in R using [`{precommit}`](https://lorenzwalthert.github.io/precommit/){target='_blank'}. \n\n:::{style=\"font-size: 20px;\"}\n\nThe framework offers [hundreds of hooks](https://pre-commit.com/hooks.html){target='_blank'} to choose from and you can choose ones relevant to your config files (e.g. to lint and format JSON and YAML files).\n\n:::\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/r-lib/styler/blob/main/.github/workflows/pre-commit.yaml){target='_blank'} to detect any problems with non-R code on each commit. You can specify the hooks relevant to you in a [pre-commit config file](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.pre-commit-config.yaml){target='_blank'}.\n\n:::\n\n::::\n\n# Make sure there are no performance regressions.\n\n## Don't slow it down {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/snail.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIf your package is mature and stable enough that you have started to invest in improving its efficiency, it is important that you have some metric by which you can benchmark if a new Pull Request improves or degrades performance in comparison with the latest commit on `main`.\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nChecking for performance regressions just before or even after the release is not ideal, since it might be difficult to revert back to the state before regression took place.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to reliably benchmark Pull Requests for performance regressions?**\n\n:::\n\n:::\n\n::::\n\n## Detecting performance regressions {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n[`{touchstone}`](https://lorenzwalthert.github.io/touchstone/) offers a continuous benchmarking tool for reliable relative measurement of performance in the Pull Request versus `main`-branch. The results are directly reported as a comment in GitHub Pull Requests.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/touchstone.png){width=1185}\n:::\n:::\n\n\n\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse [GHA workflow](https://github.com/r-lib/styler/blob/main/.github/workflows/touchstone-comment.yaml){target='_blank'} for benchmarking PRs and detecting any performance regressions.\n\n:::\n\n::::\n\n## Checklist for code quality {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that the code is readable, maintainable, and follows agreed conventions.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                              |\n| :------------------------------------------------ |\n| Make sure the code follows a style guide.         |\n| Make sure there are no known code quality issues. |\n| Make sure there are no performance regressions.   |\n\n# Dependency management {#dependency}\n\nPreventive care to make sure that all suggested (aka weak or soft) dependencies are used conditionally.\n\n# \"Dependencies are invitations for other people to break your package.\"\n\\- Joshua Ulrich\n\n#\n\n<!-- column layout -->\n\n:::::{style=\"background-color: #A9F5A9; padding: 20px; border-radius: 25px;\"}\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that the package is robust to availability of soft dependencies and breaking changes in hard dependencies.**\n\n:::\n\n:::\n\n::::\n\n:::::\n\n## Types of Dependencies {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/trust.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nDependencies (code that your source code relies on) are an inevitable part of package development.\n\n:::\n\n::::\n\n. . . \n\n:::{.callout-note}\n\n## Not all dependencies are created equal! \n\nHard dependencies have a broader scope because they are needed at runtime; i.e. your package won't work without them, while soft dependencies have a narrow scope; e.g. because they are needed only for testing or for examples.\n\n| Dependency |  In `DESCRIPTION`   |                        Scope                        |\n| :--------: | :-----------------: | :-------------------------------------------------: |\n|    Hard    | `Depends`/`Imports` |    Needed for your package to work as expected.     |\n|    Soft    |     `Suggests`      | Nice to have but your package will work regardless. |\n\n:::\n\n:::{.callout-important}\n\n## Dependencies bring risk\n\nIf a critical dependency becomes unavailable (e.g. because its author decides to archive it), bad luck. You **must** either refactor to remove dependency or look for an alternative. Otherwise, your package is no longer going to work. But this shouldn't be the case for soft dependencies since they are not critical for your package to work.\n\n:::\n\n# Make sure soft dependencies are used conditionally.\n\n## Soft dependency hygiene {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/damaged-package.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIn a high-level, user-facing package, there can be a substantial number of soft dependencies. The package then risks breakage for *any* unavailable soft dependency, if it is not used conditionally.\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/headache.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIt can be quite taxing for maintainers to remove examples or tests related to a soft dependency if it gets archived, and restore them once the dependency is unarchived. To avoid this, soft dependencies should always be used conditionally.\n\n:::{style=\"font-size: 20px;\"}\n\nCRAN runs the additional [\"noSuggests\" check](https://www.stats.ox.ac.uk/pub/bdr/noSuggests/){target='_blank'} to look for possible breakages.\n\n:::\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to make sure *all* soft dependencies are being conditionally used?**\n\n:::\n\n:::\n\n::::\n\n## Conditional dependency usage {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='70%'}\n\nSoft dependencies should be used conditionally across all contexts. \nLet's say `{lme4}` is such a dependency.\n\n:::\n\n::: {.column width='30%'}\n\nIn `DESCRIPTION`\n\n```dcf\nSuggests:\n    lme4\n```\n\n:::\n\n::::\n\n<br>\n\n<hr>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n**Examples** in help pages should be executed only if package is available.\n\n:::\n\n::: {.column width='50%'}\n\n```{.r}\n# In R/file-1.R\n#' @examplesIf requireNamespace(\"lme4\")\n#' lme4::lmer(...)\n```\n\n:::\n\n::::\n\n<hr>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n**Vignettes** (or specific code chunks) should be executed only if package is available.\n\n:::\n\n::: {.column width='50%'}\n\n\n\n\n````{.default}\n<!-- In vignettes/doc-1.Rmd -->\n```{r eval = requireNamespace(\"lme4\")}\nlme4::lmer(...)\n```\n\n````\n\n\n\n:::\n\n::::\n\n<hr>\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n**Tests** should be run only if package is available.\n\n:::\n\n::: {.column width='50%'}\n\n```{.r}\n# In tests/testthat/test-file-1.R\ntest_that(\"bla\", {\n  testthat::skip_if_not_installed(\"lme4\")\n  expect_equal(lme4::lmer(...), ...)\n})\n```\n\n:::\n\n::::\n\n<hr>\n\n## Checking conditional usage {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nThe trick here is to run `R CMD check` twice: once when *all* soft dependencies are available, and once when *none* are available. If the package passes the `R CMD check` in the first but not the second context, you can be sure that some soft dependencies are not being used conditionally.\n \n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse GHA workflows to install [*all* dependencies](https://github.com/r-lib/actions/blob/v2-branch/examples/check-full.yaml){target='_blank'} or [*only* hard dependencies](https://github.com/r-lib/actions/blob/v2-branch/examples/check-no-suggests.yaml){target='_blank'} and check if the package passes `R CMD check` on each commit.\n\n:::\n\n::::\n\n. . .\n\n:::{.callout-tip}\n\n## Additional tips \n\n- This trick won't work for excluded vignettes (from `vignettes/` subdirectory or `.Rbuildignore`-ed). To ensure that excluded vignettes are using soft dependencies conditionally, build package website in [\"noSuggests\" mode](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/pkgdown-no-suggests.yaml){target='_blank'}.\n\n- For `R CMD check` with all dependencies installed, use [strict workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/R-CMD-check-strict.yaml){target='_blank'} that fails on any `NOTE`. To avoid failing on `NOTE`s accepted by CRAN, include this in `DESCRIPTION`:\n\n```dcf\nConfig/rcmdcheck/ignore-inconsequential-notes: true\n```\n\n:::\n\n## Special care for examples {.smaller}\n\nPrefer using `\\donttest()` over `\\dontrun()` for [skipping examples](https://indrajeetpatil.github.io/preventive-r-package-care/#/broken-examples-in-help-pages). \n\nThis is because the latter will be skipped during R CMD Check and `{pkgdown}` also will not execute these examples. Therefore, you will miss out on an example that should be run conditionally. This can become an issue if you do decide to run this example in the future by removing `\\dontrun`.\n\n. . . \n\nE.g., assuming `{lme4}` is a soft dependency and is not available:\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\nWon't fail in \"noSuggests\" workflow\n\n```{.r}\n#' @examples\n#' \\dontrun{\n#'   lme4::lmer(...)\n#' }\n```\n\n:::\n\n::: {.column width='50%'}\n\nWill fail in \"noSuggests\" workflow\n\n```{.r}\n#' @examples\n#' \\donttest{\n#'   lme4::lmer(...)\n#' }\n```\n\n:::\n\n::::\n\nExpected usage:\n\n```{.r}\n#' @examplesIf requireNamespace(\"lme4\")\n#' \\donttest{\n#'   lme4::lmer(...)\n#' }\n```\n\n## Anticipating breakages {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/damaged-package.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIt is important to anticipate changes in dependencies that may break your packages. Although some maintainers (of your dependencies) will be kind enough to let you know of upcoming breaking changes, such communication can't be assumed or might not even be possible. \n\n:::{style=\"font-size: 20px;\"}\n\nIf your package is not on CRAN, there is no way for the maintainers to detect breakages in reverse dependencies and inform maintainers. Similarly, if a reverse dependency is skipping tests on CRAN, possible breakages can go undetected. \n\n:::\n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/confused.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nYou may figure out that something is broken *after* a dependency is updated, the package stops working for the users, and they inform you. This is especially true if your package is not under active development, and so CI/CD won't detect that your package is broken.\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/problem-solved.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n::: {style=\"color: red;\"}\n\n**How to detect upcoming breaking changes in dependencies?**\n\n:::\n\n:::\n\n::::\n\n## Detecting breakages early {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/toolbox.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nIn order to detect breakages earlier, you can run `R CMD check` by installing development versions of dependencies. \n\n:::\n\n::::\n\n. . .\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/robot.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\nUse scheduled [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/R-CMD-check-devel.yaml){target='_blank'} to automate checking breakages.\n\n:::{style=\"font-size: 20px;\"}\n\nHow frequently you should run this check (e.g., once a month, once every six months, etc.) and which dependencies you should include (e.g., only hard, only soft, a few of each, etc.) depends on how actively both your own package and your dependencies are being developed. \n\n:::\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n:::{.callout-tip}\n\n## What should you do if you *do* detect a breakage?\n\n- If the root cause of breakage turns out to be a regression in the dependency, discuss with the maintainer.\n\n- If the breakage is legitimate, make a PR to your repo with a fix but merge only when either the maintainer informs you of an upcoming release or the package has a new release. **Don't** push the fix to the `main`-branch because the breaking change could be reverted before release.\n\n:::\n\n## Checklist for dependency management {.smaller}\n\n<!-- column layout -->\n\n:::: {.columns}\n\n::: {.column width='10%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/target.png){width=256}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='90%'}\n\n:::{style=\"color: blue; text-align: center;\"}\n\n**To reduce maintenance headaches, make sure that the package is robust to availability of soft dependencies and breaking changes in hard dependencies.**\n\n:::\n\n:::\n\n::::\n\n<br>\n\n| Item                                                                              |\n| :-------------------------------------------------------------------------------- |\n| Make sure examples in help pages are run conditionally.                           |\n| Make sure vignettes (or code chunks therein) are executed conditionally.          |\n| Make sure tests are run conditionally.                                            |\n| Make sure excluded vignettes (or code chunks therein) are executed conditionally. |\n| Anticipate possible breaking changes coming from dependencies and act on it.      |\n\n# Eco-friendly workflows\n\nDo you *really* need to run all workflows on each commit?!\n\n## Skipping workflows {.smaller}\n\n:::: {.columns}\n\n::: {.column width='70%'}\n\nAlthough all these workflows can be run for free (thanks Microsoft!), they still expend energy and it might bother you that you are wasting energy even on minor changes.\n\n:::\n\n::: {.column width='30%'}\n\n:::{style=\"font-size: 20px;\"}\n\nExample of an insignificant change.\n\n:::\n\n```diff\n# In `NEWS.md`\n- witdh\n+ width\n```\n\n:::\n\n::::\n\n. . . \n\n:::{.callout-tip}\n\n## Reducing count of workflow runs\n\nYou can use a few or all of the following options to reduce the frequency with which the workflows are run.\n\n- Use `[skip ci]` in your commit messages for commits with insignificant changes.\n- Run workflows only when a PR is marked \"Ready for Review\".\n- Skip running some workflows (e.g., spelling, HTML5, link rot, etc.) on each commit once all workflows are green. Instead, run them with weekly or monthly schedules, and then fix the newly found problems.\n- Run some workflows only when ready for a new release.\n- Cancel [workflows in progress](https://docs.github.com/en/actions/using-jobs/using-concurrency){target=\"_blank\"} if a new commit is made.\n\n:::\n\n# Caveats\n\nNo good practice is dogma. There always exist exceptions.\n\n## Using workflows flexibly {.smaller}\n\n- You can skip some workflows or create new workflows depending on the project-specific demands (e.g. compiled code, database connections, API access, etc.).\n\n- Sometimes it might not even be possible to run all workflows successfully because a few of them conflict with each other. \n\n:::{style=\"font-size: 20px;\"}\n  \nIf you have a data visualization package (e.g.), the more examples you have in the documentation, the bigger the package size would be, which might leave a `NOTE` in `R CMD check` and strict workflow will fail. Which of these workflows is more important is a subjective decision.\n  \n:::\n\n# Failure is the only option\n\nIt is necessary that builds fail for any existing or newly found issues.\n\n# \"Later equals never.\"\n\\- LeBlanc's Law\n\n## Managing technical debt {.smaller}\n\n:::: {.columns}\n\n::: {.column width='40%'}\n\n<!-- [Credits](https://vincentdnl.com/drawings/){target='_blank'} -->\n\n\n\n::: {.cell .fig-cap-location-bottom}\n::: {.cell-output-display}\n![](media/technical_debt.png){width=690}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='60%'}\n\n:::{.callout-tip}\n\n## Tomorrow never comes\n\nIt might seem excessive that workflows fail if *any* issue is found (*\"Really?! You want builds to fail even if there is a single code quality issue?!\"*).\n\nBut this is the only way to sidestep procrastination (*\"We can fix the broken link later!\"*) that can lead to the accumulation of technical debt. With time, this debt can compound and every new feature requires longer to implement.\n\nFailed builds also act as organizational quality control mechanisms. You will no longer need to justify carving out time to address technical debt if a new release can't be made unless all checks are green.\n\n:::\n\n:::\n\n::::\n\n:::{.callout-note}\n\n## Once green, always green\n\nThe initial work you will put into achieving green checks will pay dividends in the long run. And, once a check is green, you only need to make sure that it stays that way for each new commit to the `main`-branch.\n\n:::\n\n## Easing into it {.smaller}\n\n:::: {.columns}\n\n::: {.column width='40%'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](media/bike-fall.jpeg){width=100%}\n:::\n:::\n\n\n\n:::\n\n::: {.column width='60%'}\n\nIt might not be feasible to implement all workflows in one go, especially when they will be marked as failed until *all* relevant issues have been dealt with.\n\nThis is especially true for organizations that have a policy to always keep the default branch \"green\".\n\n:::{style=\"font-size: 20px;\"}\n\nI'd highly recommend that you adopt such a policy, both for your organization and private repositories.\n\n:::\n\n:::{style=\"background-color: #FFD56F; padding: 20px; border-radius: 25px;\"}\n\nYou can adopt an **incremental approach** of adding one workflow per PR.\n\nThis PR can be merged when the new workflow runs successfully.\n\n:::\n\n:::\n\n::::\n\n# Conclusion\n\nIt is possible to build robust automation infrastructure for R package development that can improve user experience and make long-term development more reliable and sustainable.\n\n# Further reading\n\nFor more extensive discussions on best practices in software development.\n\n## {.smaller}\n\n### R-specific\n\n- [Writing R Extensions](https://rstudio.github.io/r-manuals/r-exts/){target=\"_blank\"}\n\n- Wickham, H., and Bryan, J. (2023). [*R Packages*](https://r-pkgs.org/){target=\"_blank\"} (2nd edition). O'Reilly.\n\n### Language-agnostic\n\n- McConnell, S. (2004). *Code Complete* (2nd edition). Microsoft Press.\n\n- Martin, R.C. (2017) *Clean Architecture*. Addison-Wesley.\n\n- Ousterhout, J. K. (2018). *A Philosophy of Software Design*. Palo Alto: Yaknyam Press.\n\n- Seemann, M. (2021) *Code That Fits in Your Head*. Addison-Wesley.\n\n# \n\nSource code for these slides can be found [on GitHub](https://github.com/IndrajeetPatil/preventive-r-package-care/){target='_blank'}.\n\nStar the repo and share with others if you liked the slides! 😊\n\n# For more\n\nIf you are interested in good programming and software development practices, check out my other [slide decks](https://sites.google.com/site/indrajeetspatilmorality/presentations){target=\"_blank\"}.\n\n# Acknowledgements {.smaller}\n\nThanks to all creators, maintainers, and contributors for the tools mentioned throughout the presentation. Without them, it wouldn't be so easy to create robust package development architecture in R! 🙏\n\n<br>\n\n:::{style=\"background-color: #FEC868; padding: 20px; border-radius: 25px;\"}\n\nAll images used in these slides have been taken from [Flaticon](www.flaticon.com){target=\"_blank\"} by [freepikcompany](https://www.freepikcompany.com/){target=\"_blank\"}. Huge thanks to them for making such fantastic resource freely available.\n\nAlthough the current repository is published under [CC0 1.0 Universal (CC0 1.0)](https://creativecommons.org/publicdomain/zero/1.0/){target=\"_blank\"}, this license **does not** cover  images in the `/media` folder. If you use them, you need to follow the [attribution policy](https://support.flaticon.com/){target=\"_blank\"} stated by Flaticon.\n\n:::\n\n# Find me at...\n\n{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets){target=\"_blank\"}\n\n{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/){target=\"_blank\"}\n\n{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil){target=\"_blank\"}\n\n{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/){target=\"_blank\"}\n\n{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com){target=\"_blank\"}\n\n# Thank You \n\nAnd Happy Package Care! 👼\n\n## Session information {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info(include_base = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.0 (2024-04-24)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  C.UTF-8\n ctype    C.UTF-8\n tz       UTC\n date     2024-04-28\n pandoc   3.1.8 @ /opt/hostedtoolcache/pandoc/3.1.8/x64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version date (UTC) lib source\n backports      1.4.1   2021-12-13 [1] RSPM\n base         * 4.4.0   2024-04-24 [3] local\n callr          3.7.6   2024-03-25 [1] RSPM\n cli            3.6.2   2023-12-11 [1] RSPM\n compiler       4.4.0   2024-04-24 [3] local\n crayon         1.5.2   2022-09-29 [1] RSPM\n cyclocomp      1.1.1   2023-08-30 [1] RSPM\n datasets     * 4.4.0   2024-04-24 [3] local\n desc           1.4.3   2023-12-10 [1] RSPM\n digest         0.6.35  2024-03-11 [1] RSPM\n evaluate       0.23    2023-11-01 [1] RSPM\n fansi          1.0.6   2023-12-08 [1] RSPM\n fastmap        1.1.1   2023-02-24 [1] RSPM\n glue           1.7.0   2024-01-09 [1] RSPM\n graphics     * 4.4.0   2024-04-24 [3] local\n grDevices    * 4.4.0   2024-04-24 [3] local\n htmltools      0.5.8.1 2024-04-04 [1] RSPM\n jsonlite       1.8.8   2023-12-04 [1] RSPM\n knitr          1.46    2024-04-06 [1] RSPM\n lazyeval       0.2.2   2019-03-15 [1] RSPM\n lifecycle      1.0.4   2023-11-07 [1] RSPM\n lintr        * 3.1.2   2024-03-25 [1] RSPM\n magrittr       2.0.3   2022-03-30 [1] RSPM\n methods      * 4.4.0   2024-04-24 [3] local\n pillar         1.9.0   2023-03-22 [1] RSPM\n pkgconfig      2.0.3   2019-09-22 [1] RSPM\n png            0.1-8   2022-11-29 [1] RSPM\n processx       3.8.4   2024-03-16 [1] RSPM\n ps             1.7.6   2024-01-18 [1] RSPM\n R6             2.5.1   2021-08-19 [1] RSPM\n remotes        2.5.0   2024-03-17 [1] RSPM\n rex            1.2.1   2021-11-26 [1] RSPM\n rlang          1.1.3   2024-01-10 [1] RSPM\n rmarkdown      2.26    2024-03-05 [1] RSPM\n rstudioapi     0.16.0  2024-03-24 [1] RSPM\n sessioninfo    1.2.2   2021-12-06 [1] any (@1.2.2)\n stats        * 4.4.0   2024-04-24 [3] local\n tibble         3.2.1   2023-03-20 [1] RSPM\n tools          4.4.0   2024-04-24 [3] local\n utf8           1.2.4   2023-10-22 [1] RSPM\n utils        * 4.4.0   2024-04-24 [3] local\n vctrs          0.6.5   2023-12-01 [1] RSPM\n withr          3.0.0   2024-01-16 [1] RSPM\n xfun           0.43    2024-03-25 [1] RSPM\n xml2           1.3.6   2023-12-04 [1] RSPM\n xmlparsedata   1.0.5   2021-03-06 [1] RSPM\n yaml           2.3.8   2023-12-11 [1] RSPM\n\n [1] /home/runner/work/_temp/Library\n [2] /opt/R/4.4.0/lib/R/site-library\n [3] /opt/R/4.4.0/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}