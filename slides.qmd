---
format:
  revealjs:
    css: style.css 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for these slides can be found [on GitHub](https://github.com/IndrajeetPatil/preventive-r-package-care/){target='_blank'}."
execute:
  echo: true
keywords: ["software-engineering", "r-packages", "best-practices", "CRAN"]
---

## Preventive Care for R Packages {style="text-align: center;"}

<!-- Don't render this file manually. Run `renderer.R` script instead. -->

::: {style="text-align: center;"}

Indrajeet Patil

:::


<!-- ::: {style="margin-top: 10em; font-size:0.75em"} -->

<!-- - [Link to slides](https://indrajeetpatil.github.io/preventive-r-package-care/) -->
<!-- - [Github repo](https://github.com/IndrajeetPatil/preventive-r-package-care/) -->

<!-- ::: -->

<!-- ![](media/plant.png){.absolute width="900" height="500" left="70" top="155"} -->

<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->
<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->

# "Software engineering ought to produce sustainability." 
\- Mark Seemann (*Code That Fits in Your Head*)

# Target audience

Specifying the intended audience early-on to check relevance of the content for you.

# Before we begin

Don't miss the forest for the trees.

## 

:::{.callout-important}

## It's not about the tech

I will rely heavily on GitHub as the hosting platform and GitHub Actions as the CI/CD framework. Even if you use neither, don't feel that this is not relevant for you.

At the end of each section, I will include a checklist with broader takeaways that are independent of the tech stack used for development. You can implement the necessary checks with the tools you prefer.

:::

:::{.callout-note}

## It's not just about CRAN

Following the recommended practices will make packages more robust to the possibility of CRAN archival, but that benefit is *incidental*.

You can follow these practices even if you never plan to submit to CRAN, since it's more about better user experience and maintainability.

:::

# Documentation

Preventive care to keep the documentation up-to-date.

# Make sure *all* examples run successfully.

## Non-working examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of examples

Exported (and key internal) functions should contain examples (`\examples{}` Rd tag) that showcase how functions are to be used. But you may skip running some examples (e.g. because they are time-consuming). In particular, R allows following tags to conditionally evaluate examples:

|      Tag      | Run by `example()`? | Run by `R CMD check`? |
| :-----------: | :-----------------: | :-------------------: |
| `\dontrun{}`  |         ‚ùå          |          ‚ùå           |
| `\donttest{}` |         ‚úÖ          |          ‚ùå           |
| `\dontshow{}` |         ‚úÖ          |          ‚úÖ           |

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

This means that `\dontrun{}` and `\donttest{}` examples might not be working, and yet may never be caught by `R CMD check`. But users will still see these examples, and wonder why they aren't working for them.

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to catch examples that don't run successfully?**

:::

:::

::::

## Checking all examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid toolbox size=2xl >}}

:::

::: {.column width='90%'}

Examples not only document, but also provide test code used for diagnostic checking of R code. You can use [`{devtools}`](https://r-lib.github.io/devtools/) to run all examples and then fix the broken ones.

```{r, eval=FALSE}
#| code-line-numbers: false
devtools::run_examples(run_dontrun = TRUE, run_donttest = TRUE)
```

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a GHA workflow to run all examples (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-all-examples.yaml){target='_blank'}). 

This will ensure that failing examples will be caught for every new commit.

:::

::::

. . .

:::{.callout-tip}

## *Nota Bene*

- The examples that are designed to fail should use

    * `if (FALSE) { ... }` (if example is included only for illustrative purposes)
    * `try({ ... })` (if the intent is to show the error)

- You can set up a [cron job](https://en.wikipedia.org/wiki/Cron){target='_blank'} and run the GHA workflow (e.g.) once a week to check for broken examples if the repo is not under active development.

:::

# Ensure validity of *all* URLs.

## What is link rot? {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid link-slash size=2xl >}}

:::

::: {.column width='90%'}

If the package documentation includes hyperlinks to external resources, make sure that they are still valid and not dangling.

[Link rot](https://en.wikipedia.org/wiki/Link_rot){target='_blank'} happens because web pages move to new addresses or become permanently unavailable.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Such dangling references can be frustrating for the users trying to access the resources that the dead links were previously pointing to.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to prevent link rot from accumulating?**

:::

:::

::::

## Detecting link rot {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid toolbox size=2xl >}}

:::

::: {.column width='90%'}

You can use [`{urlchecker}`](https://r-lib.github.io/urlchecker/) to detect dead web references and their locations in the documentation. Fixing these links is then straightforward.

```{r, eval=FALSE}
#| code-line-numbers: false
urlchecker::url_check()
```


:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a GHA workflow to automate URL checking (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-link-rot.yaml){target='_blank'}). 

This will ensure that bad URLs will be discovered for every new commit.

:::

::::

. . .

:::{.callout-tip}

## *Nota Bene*

- If `{urlchecker}` finds dead URLs in `.html`/`.md` files, you will need to update `.Rmd`/`.qmd` files and then regenerate the docs. Otherwise, you will keep wondering why `urlchecker::url_update()` isn't fixing the links.

- You can set up a [cron job](https://en.wikipedia.org/wiki/Cron){target='_blank'} and run the GHA workflow (e.g.) once a week to check for link rot. This will unearth link rot even if the repo is not under active development.

- There can be false positives sometimes because a server is temporarily down. Re-triggering the workflow can help.

:::

# Ensure *all* HTML in the documentation is valid.

## HTML5 check

## Spell check

## Check example coverage

## Up-to-date README

All code runs successfully.

## Checklist

# Dependency management

## "noSuggests" check

## "noSuggests" pkgdown

# Unit testing

# Turn warnings into errors

# Precommit

# Benchmarking

Touchstone framework

# Check against devel versions of dependencies

# Check on multiple R versions and platforms

# Fail on NOTE

# For more

If you are interested in reading more of my slide decks on related topics, visit [this](https://sites.google.com/site/indrajeetspatilmorality/presentations){target="_blank"} page.

# Acknowledgements {.smaller}

A number of icons used in these slides have been taken from [Flaticon](www.flaticon.com). Huge thanks to them for making such fantastic resource freely available to the users.

# Find me at...

{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets){target="_blank"}

{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/){target="_blank"}

{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil){target="_blank"}

{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/){target="_blank"}

{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com){target="_blank"}

# Thank You 

And Happy Caring for Your Packages! üòä

## Session information {.smaller}

```{r}
sessioninfo::session_info(include_base = TRUE)
```

