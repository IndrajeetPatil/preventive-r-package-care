---
format:
  revealjs:
    css: style.css 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for these slides can be found [on GitHub](https://github.com/IndrajeetPatil/preventive-r-package-care/){target='_blank'}."
execute:
  echo: true
keywords: ["software-engineering", "r-packages", "best-practices", "CRAN"]
---

## Preventive Care for R Packages {style="text-align: center;"}

<!-- Don't render this file manually. Run `renderer.R` script instead. -->

::: {style="text-align: center;"}

Indrajeet Patil

:::

```{r, echo=FALSE}
knitr::include_graphics("media/preventive-care.jpeg")
```


<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->
<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->

# "Software engineering ought to produce sustainability." 
\- Mark Seemann (*Code That Fits in Your Head*)

# Target audience {.smaller}

If you ever lay awake in the bed wondering:

- if the users having a bad experience while using the package,
- if you will receive the dreaded CRAN email about archival, and
- if you will be able to update the package in time,

then this presentation is for you! 😊

# Before we begin

Don't miss the forest for the trees.

## {.smaller}

:::{.callout-important}

## It's not about the tools

I will rely heavily on GitHub as the hosting platform and GitHub Actions as the CI/CD framework. Even if you use neither, the broader takeaways should still be relevant. And, of course, you can implement the necessary checks with the tools you prefer.

:::

<br>

:::{.callout-note}

## It's not *just* about CRAN

Following the recommended practices will make packages more robust to CRAN checks, but that benefit is *incidental*. You can follow these practices even if you never plan to submit to CRAN. The goal here is ensuring better user experience and maintainability.

:::

<br>

:::{.callout-tip}

## It's not even about R

You can actually utilize the practices outlined here to software development in any other programming language.

:::

## Iconography {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='15%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='35%'}

<br>
Overarching goal

:::

::: {.column width='15%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='35%'}

<br>
Problem to solve

:::

::::

<!-- column layout -->

:::: {.columns}

::: {.column width='15%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='35%'}

<br>
Bad user experience

:::

::: {.column width='15%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='35%'}

<br>
Maintenance headaches

:::

::::

<!-- column layout -->

:::: {.columns}

::: {.column width='15%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='35%'}

<br>
Tool

:::

::: {.column width='15%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='35%'}

<br>
Automation

:::

::::

# Documentation

Preventive care to make sure the docs are up-to-date.

# "Incorrect documentation is often worse than no documentation."
\- Bertrand Meyer

#

<!-- column layout -->

:::::{style="background-color: #A9F5A9; padding: 20px; border-radius: 25px;"}

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**For a good user experience, make sure that the docs are plentiful, valid, and up-to-date.**

:::

:::

::::

:::::

## Sources of documentation {.smaller}

Package documentation is typically scattered across the following documents.

<!-- column layout -->

:::: {.columns}

::: {.column width='30%'}

:::{style="text-align: center;"}

**README.md**

:::

```{r, echo=FALSE}
knitr::include_graphics("media/readme.png")
```

:::

::: {.column width='5%'}

:::

::: {.column width='30%'}

:::{style="text-align: center;"}

**Help pages**

:::

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='5%'}

:::

::: {.column width='30%'}

:::{style="text-align: center;"}

**Vignettes**

```{r, echo=FALSE}
knitr::include_graphics("media/application.png")
```

:::

:::

::::

# Make sure there are enough examples in the documentation.

## An example is worth a thousand words {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/research.png")
```

:::

::: {.column width='90%'}

Access to abundant examples in help pages and vignettes provides a natural starting point for users to explore and experiment with the available functionality. 

Good examples are difficult to write, but any examples are better than none.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Without enough expository examples, users are left to fumble their way into discovering rest of the available functionality.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to ensure that there are *enough* number of examples?**

:::

:::

::::

## Maintaining example code coverage {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='9%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='91%'}

Use [`{covr}`](https://covr.r-lib.org/){target='_blank'} to compute example code coverage (i.e. proportion of the source code that is executed when running examples in help pages and vignettes), and to ensure that it is above a certain threshold.

```{r, eval=FALSE}
#| code-line-numbers: false
package_coverage(type = c("examples", "vignettes"), commentDonttest = FALSE, commentDontrun = FALSE)
```

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='9%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='91%'}

Use a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/test-coverage-examples.yaml){target='_blank'} to ensure that the code coverage via examples never drops below the chosen threshold.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- The choice of threshold is subjective and context-sensitive. Chasing after 100% example code coverage is futile.

- Vignettes not included in the package (by placing them in a `vignettes/` subdirectory or by adding them to `.Rbuildignore`) will not contribute towards the code coverage. You can adjust your coverage threshold accordingly.

- You can choose a threshold on a package-basis or on a file-basis (`covr::file_coverage()`).

:::

# Make sure all README examples are working.

## README documentation {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/readme.png")
```

:::

::: {.column width='90%'}

`README.md` provides a quick overview of the package API and can feature examples of key functions. 

Although breaking changes might be infrequent, when they do occur, the code in README may become defunct.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

`README.md` is probably the first and the most-visited document in a project and any broken examples therein is bound to confuse many users.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to insure against broken code in README?**

:::

:::

::::

## Detecting broken README examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{rmarkdown}`](https://rmarkdown.rstudio.com/github_document_format.html) to dynamically generate `README.md` from `README.Rmd`. If there is broken code in README, it will fail to render.

```{r, eval=FALSE}
#| code-line-numbers: false
rmarkdown::render("README.md", output_format = rmarkdown::github_document())
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-readme.yaml){target='_blank'} to check that README can be successfully rendered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If you are starting a new project, create README using [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html).

- If you need to convert your existing `.md` to `.Rmd`, you are [currently](https://github.com/yihui/knitr/issues/1807) out of luck. You will need to do this manually.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule){target='_blank'} (e.g. once a week).

:::

# Make sure *all* examples in help pages are working.

## Non-working examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of examples

Help pages for exported functions should contain examples (Rd tag: `\examples{}`) illustrating their usage. But you can skip executing some examples (e.g. because they are too time-consuming). In particular, R allows offers following tags:

|      Tag      | Run by `example()`? | Run by `R CMD check`? |
| :-----------: | :-----------------: | :-------------------: |
| `\dontrun{}`  |         ❌          |          ❌           |
| `\donttest{}` |         ✅          |          ❌           |
| `\dontshow{}` |         ✅          |          ✅           |

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Thus, broken `\dontrun{}` and `\donttest{}` examples may not be flagged by `R CMD check`. Users will still see these examples, and wonder why they aren't working for them.

:::{style="font-size: 20px;"}

CRAN's additional ["donttest" check](https://www.stats.ox.ac.uk/pub/bdr/donttest/){target='_blank'} does run `\donttest{}` examples.

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```


:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to catch examples that don't run successfully?**

:::

:::

::::

## Checking all examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{devtools}`](https://r-lib.github.io/devtools/){target='_blank'} to run all examples. You can then fix the broken ones.

```{r, eval=FALSE}
#| code-line-numbers: false
devtools::run_examples(run_dontrun = TRUE, run_donttest = TRUE)
```

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-all-examples.yaml){target='_blank'} to make sure all examples in help pages are working on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Examples that are *meant* to fail should use any of the following patterns:

    * `if (FALSE) { ... }` (if example is included only for illustrative purposes)
    * `try({ ... })` (if the intent is to show the error)

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger){target='_blank'}  (e.g. once a week).

:::

# Make sure examples in *all* vignettes are working.

## Vignette examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/application.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of vignettes

Vignettes included in the package will fail if examples are broken. But you can choose to exclude some vignettes to reduce package size or to reduce check time. You can do so by placing them in a `vignettes/` subdirectory or by adding them to `.Rbuildignore`.

:::

:::

::::

<br>

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='90%'}

Thus, broken examples in excluded vignettes won't be caught by `R CMD check`. Although users might not see them on CRAN, as a maintainer, you don't wish to retain defunct examples in the documentation.

:::

::::

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```


:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to detect broken examples in excluded vignettes?**

:::

:::

::::

## Building all vignettes {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Although excluded vignettes may not be checked by `R CMD check`, they are still built by [`{pkgdown}`](https://r-lib.github.io/pkgdown/) to generate a static website. This would detect any broken examples.

```{r, eval=FALSE}
#| code-line-numbers: false
pkgdown::build_site()
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use a [GHA workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/pkgdown.yaml){target='_blank'} to make sure examples in *all* vignettes are working on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Code chunks that are *meant* to fail should use `error=TRUE` option.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule){target='_blank'} (e.g. once a week).

:::

# Make sure *all* URLs are valid.

## What is link rot? {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid link-slash size=2xl >}}

:::

::: {.column width='90%'}

Package documentation often includes a plenty of hyperlinks to external resources. But some of them may become invalid over time.

[Link rot](https://en.wikipedia.org/wiki/Link_rot){target='_blank'} happens because web pages move to new addresses or become permanently unavailable.

:::

:::: 

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Such dangling references can be frustrating for the users trying to access the resources that the dead links were previously pointing to.

:::

::::

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```


:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to prevent link rot from accumulating?**

:::

:::

::::


## Detecting link rot {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

You can use [`{urlchecker}`](https://r-lib.github.io/urlchecker/){target='_blank'} to detect dead web references and their locations in the documentation. Fixing these links is then straightforward.

```{r, eval=FALSE}
#| code-line-numbers: false
urlchecker::url_check()
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use GHA workflow to automate URL checking (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-link-rot.yaml){target='_blank'}). This will ensure that bad URLs will be discovered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If `{urlchecker}` finds dead URLs in `.html`/`.md` files, you will need to update `.Rmd`/`.qmd` files and then regenerate the docs. Otherwise, you will keep wondering why `urlchecker::url_update()` isn't fixing the links.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).

- There can be false positives sometimes because a server is temporarily down. Re-triggering the workflow can help.

:::

# Make sure there are no spelling mistakes.

## Spelling mistakes {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/spell-check.png")
```

:::

::: {.column width='90%'}

Spelling mistakes are inevitable and, if left unchecked, they can accumulate rapidly with the increase in the documentation.

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Spelling mistakes obvious to native speakers may not be so for non-native speakers, who will be frustrated that they can't find the meaning of the misspelt word. 

Additionally, misspelling technical words (e.g. *innode* vs. [*inode*](https://en.wikipedia.org/wiki/Inode){target='_blank'}) can lead users down the wrong path and waste their time. 

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to prevent spelling mistakes from accumulating in the documentation?**

:::

:::

::::

## Creating a list of allowed misspellings {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='70%'}

There exist multiple English spelling standards (e.g. in British English: *anaemia*, but in American English: *anemia*). You can specify your preferred standard in `DESCRIPTION`.

:::

::: {.column width='30%'}

E.g. for British English

```dcf
Language: en-GB
```

:::

::::

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='60%'}

Additionally, some technical words will not be recognized by dictionaries, but you don't want these to be considered spelling mistakes either. You can create a list of allowed misspelt words in the `WORDLIST` file.

:::

::: {.column width='20%'}

File location

```
├── DESCRIPTION
├── inst
│   └── WORDLIST
```

:::

::: {.column width='20%'}

Example file

```
addin
api
AppVeyor
biocthis
bootswatch
...
winbuilder
YAML
```

:::

::::

. . . 

<br>

Now you are all set for detecting spelling mistakes!

## Detecting spelling mistakes {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{spelling}`](https://docs.ropensci.org/spelling/){target='_blank'} to detect misspelled words and their location in the docs.

```{r, eval=FALSE}
#| code-line-numbers: false
spelling::spell_check_package()
```

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use GHA workflow to automate URL checking (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-spelling.yaml){target='_blank'}). This will ensure that spelling mistakes will be discovered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Instead of a GHA workflow, you can also include spell check tests in the package itself. For more, see `usethis::use_spell_check()`.

- If you install [Grammarly desktop](https://www.grammarly.com/desktop), it will flag spelling mistakes and will even suggest a clearer way to phrase your sentences. For VS Code, check out [Grammarly extension](https://marketplace.visualstudio.com/items?itemName=znck.grammarly).

:::

# Make sure *all* HTML in the help pages is valid.

## HTML5 check {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/html-5.png")
```

:::

::: {.column width='90%'}

HTML has few syntactic rules, and browsers may not even enforce the rules it does have. E.g., browsers will tolerate mismatched tags, missing end tags, misnested tags, etc. HTML5 standard aims to improve this situation, and package help pages use HTML5 standard since R 4.2.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='90%'}

You will thus need to make sure that your package documentation neither generates invalid HTML nor contains raw invalid HTML.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to make sure help pages have valid HTML?**

:::

:::

::::

## Detecting invalid HTML {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

CRAN uses [HTML tidy](https://www.html-tidy.org/documentation/) to detect markup errors in HTML. But, if you use [`{roxygen2}`](https://roxygen2.r-lib.org/){target='_blank'}, it will ensure against producing any invalid HTML.

```{r, eval=FALSE}
#| code-line-numbers: false
roxygen2::roxygenise()
```

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use GHA workflow to automate checking validity of HTML manual (see [example workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/html-5-check.yaml){target='_blank'}) on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If your documentation contains math equations, you can choose between [`{katex}`](https://docs.ropensci.org/katex/reference/katex.html){target='_blank'} and [`{mathjaxr}`](https://github.com/wviechtb/mathjaxr){target='_blank'} to convert LaTeX math expressions to HTML for use in package manual pages.

:::

## Checklist for documentation {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**For a good user experience, make sure that the docs are plentiful, valid, and up-to-date.**

:::

:::

::::

| Item                                                      |
| :-------------------------------------------------------- |
| Make sure there are enough examples in the documentation. |
| Make sure all README examples are working.                |
| Make sure all examples in help pages are working.         |
| Make sure examples in all vignettes are working.          |
| Make sure all URLs are valid.                             |
| Make sure there are no spelling mistakes.                 |
| Make sure all HTML in the help pages is valid.            |

# Dependency management

Preventive care to make sure that all suggested (aka weak or soft) dependencies are used conditionally.

# "Dependencies are invitations for other people to break your package."
\- Joshua Ulrich

#

<!-- column layout -->

:::::{style="background-color: #A9F5A9; padding: 20px; border-radius: 25px;"}

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**To reduce maintenance headaches, make sure that the package is robust to availability of soft dependencies and breaking changes in hard dependencies.**

:::

:::

::::

:::::

## Types of Dependencies {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/trust.png")
```

:::

::: {.column width='90%'}

Dependencies (code that your source code relies on) are an inevitable part of package development.

:::

::::

. . . 

:::{.callout-important}

## Not all dependencies are created equal! 

Hard dependencies have a broader scope because they are needed at runtime; i.e. your package won't work without them, while soft dependencies have a narrow scope; e.g. because they are needed only for testing or for examples.

| Dependency |  In `DESCRIPTION`   |                        Scope                        |
| :--------: | :-----------------: | :-------------------------------------------------: |
|    Hard    | `Depends`/`Imports` |    Needed for your package to work as expected.     |
|    Soft    |     `Suggests`      | Nice to have but your package will work regardless. |

:::

# Make sure soft dependencies are used conditionally.

## Soft dependency hygiene {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/damaged-package.png")
```

:::

::: {.column width='90%'}

Dependencies bring risk. If a critical dependency becomes unavailable (e.g. because its author decides to archive it), bad luck. You **must** either refactor to remove dependency or look for an alternative. Otherwise, your package is no longer going to work. 

But this shouldn't be the case for soft dependencies since they are not critical for your package to work.

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='90%'}

In a high-level, user-facing package, there can be a substantial number of soft dependencies, and the package risks breakage for *any* unavailable soft dependency. Thus, soft dependencies should be used conditionally.

:::{style="font-size: 20px;"}

CRAN runs the additional ["noSuggests" check](https://www.stats.ox.ac.uk/pub/bdr/noSuggests/){target='_blank'} to look for possible breakages.

:::

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to make sure *all* soft dependencies are being conditionally used?**

:::

:::

::::

## Conditional dependency usage {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='70%'}

Soft dependencies should be used conditionally across all contexts. 
Let's say `{lme4}` is such a dependency.

:::

::: {.column width='30%'}

In `DESCRIPTION`

```dcf
Suggests:
    lme4
```

:::

::::

<br>

<hr>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='50%'}

**Examples** in help pages should be executed only if package is available.

:::

::: {.column width='50%'}

```{.r}
# In R/file-1.R
#' @examplesIf requireNamespace("lme4")
#' lme4::lmer(...)
```

:::

::::

<hr>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='50%'}

**Vignettes** (or specific code chunks) should be executed only if package is available.

:::

::: {.column width='50%'}

<!-- TODO: add back verbatim chunk -->

placeholder text

:::

::::

<hr>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='50%'}

**Tests** should be run only if package is available.

:::

::: {.column width='50%'}

```{.r}
# In tests/testthat/test-file-1.R
test_that("bla", {
  testthat::skip_if_not_installed("lme4")
  expect_equal(lme4::lmer(...), ...)
})
```

:::

::::

<hr>

## Checking conditional usage {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

:::{.callout-important}

## Trick: Run `R CMD check` twice!

- when *all* soft dependencies are available
- when *none* are available

If the package passes `R CMD check` in the first but not the second context, you can be sure that some soft dependencies are not being used conditionally.

:::
 
:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use GHA workflows to install *all* dependencies (see [example workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/check-full.yaml){target='_blank'}) or *only* hard dependencies (see [example workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/check-no-suggests.yaml){target='_blank'}) and check if the package passes `R CMD check` on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

This trick won't work for excluded vignettes (from `vignettes/` subdirectory or `.Rbuildignore`-ed). You can run `{pkgdown}` in "noSuggests" mode (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/pkgdown-no-suggests.yaml){target='_blank'}) to ensure that excluded vignettes are also using soft dependencies conditionally.

:::

## Anticipating breakages {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/damaged-package.png")
```

:::

::: {.column width='90%'}

It is important to anticipate changes in dependencies that may break your packages. Although some maintainers (of your dependencies) will be kind enough to let you know of upcoming breaking changes, such communication can't be assumed or might not even be possible. 

:::{style="font-size: 20px;"}

If your package is not on CRAN, there is no way for the maintainers to detect breakages in reverse dependencies and inform maintainers. Similarly, if a reverse dependency is skipping tests on CRAN, possible breakages can go undetected. 

:::

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Thus, you may figure out that something is broken *after* a dependency is updated, the package stops working for the users, and they inform you. This is especially true if your package is not under active development, and so CI/CD won't detect that your package is broken.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to make sure you are on top of upcoming breaking changes in hard dependencies?**

:::

:::

::::

## Detecting breakages early {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

In order to detect breakages earlier, you can run `R CMD check` by installing development versions of dependencies of your package. 

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use scheduled GHA workflow to automate checking breakages (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/R-CMD-check-devel.yaml){target='_blank'}) on each commit.

:::{style="font-size: 20px;"}

How frequently you should run this check (e.g., once a month, every six months, etc.) and which dependencies you should include (e.g., only hard, only soft, a few of each, etc.) depends on how actively both your own package and your dependencies are being developed. 

:::

:::

::::

. . .

:::{.callout-tip}

## What should you do if you *do* detect a breakage?

- If the root cause of breakage turns out to be a regression in the dependency, inform the maintainer so that they can revert the change.

- If the breakage is legitimate, make a PR to your repo with a fix but merge only when either the maintainer informs you of an upcoming release or the package has a new release. **Don't** push the fix to `main`-branch because before release the breaking change might be reverted in the dependency itself.

:::


## Checklist for dependency management {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**To reduce maintenance headaches, make sure that the package is robust to availability of soft dependencies and breaking changes in hard dependencies.**

:::

:::

::::

<br>

| Item                                                                              |
| :-------------------------------------------------------------------------------- |
| Make sure examples in help pages are run conditionally.                           |
| Make sure vignettes (or code chunks therein) are executed conditionally.          |
| Make sure tests are run conditionally.                                            |
| Make sure excluded vignettes (or code chunks therein) are executed conditionally. |
| Anticipate possible breaking changes coming from dependencies and act on it.      |

# Exception handling

Preventive care to make sure that you don't miss out on important warnings.

# "There is a problem with warnings. No one reads them." 
\- Patrick Burns

#

<!-- column layout -->

:::::{style="background-color: #A9F5A9; padding: 20px; border-radius: 25px;"}

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**To reduce maintenance headaches, make sure that warnings are easily detected for further scrutiny and forthright dealt with.**

:::

:::

::::

:::::

## Sending signals {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/warning.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of conditions/exceptions

A function can use [conditions](https://adv-r.hadley.nz/conditions.html) to signal that something unexpected has happened with varying severity.

| Condition | Severity |                         Meaning                          |
| :-------: | :------: | :------------------------------------------------------: |
|  `error`  |   high   |   execution must stop because there is way to continue   |
| `warning` |  medium  |     execution encountered some problem but recovered     |
| `message` |   low    | execution was successful and here are some extra details |

:::

:::

::::

Out of these, warnings are the most nebulous! 

- Errors bring functions to a halt and users *must* attend to them. 
- Messages are innocuous and *can* be safely ignored. 
- But warnings are harbingers of problems that you will need to fix at some point and *need* to be dealt with, pronto. And yet you can choose to ignore them.

## A needle in the haystack {.smaller}

:::{.callout-note}

## Types of warnings

There are two kinds of warnings that you, as a developer, will need to deal with:

:::: {.columns}

::: {.column width='50%'}

**Intrinsic warnings**

Warnings that functions in your package produce to inform users.
E.g. if your package has a function to winsorize data with a certain threshold, this could be a possible warning.

```{r}
#| eval: false
winsorize(x, threshold = c(1, 2))
#> Warning message:
#> `threshold` for winsorization must be a scalar between 0 and 0.5.
```

:::

::: {.column width='50%'}

**Extrinsic warnings**

Warnings coming from packages you are using, either in examples or tests.
E.g. if your package relies on `{ggplot2}`, you might get a warning like this.

```{r}
#| eval: false
ggplot(mtcars, aes(wt, mpg)) + geom_line(size = 1)
#> Warning message:
#> Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
#> ℹ Please use `linewidth` instead.
```

:::

::::

:::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/cleaning.png")
```

:::

::: {.column width='90%'}

With a significant amount of package functionality and dependencies, there can be plenty of warnings that at any given moment.

To avoid missing out on important warnings, there should ideally be **zero of either type of warning** in your package documentation and tests. This makes it easy to notice and deal with new warnings as they appear.

:::

::::

## Suppressing intrinsic warnings {.smaller}

There is almost never a need to explicitly highlight warnings intrinsic to your package.

. . .

::: {style="background-color: #E1D7C6; padding: 20px; border-radius: 25px;"}

- Warnings are generated in contexts where functions in *your* package were used unexpectedly by the users. But such contexts shouldn't be deliberately highlighted in the documentation. Users should always see [happy path](https://en.wikipedia.org/wiki/Happy_path){target='_blank'} examples in help pages, README, or vignettes.

- While testing functions, you should use expectations (e.g. `testthat::expect_warning()`) to check that expected warnings are triggered. You shouldn't print the warnings, since they can completely overwhelm the test log, which makes it difficult to catch important warnings.

- If it's a complex function that can encounter a large number of slippery situations, it makes sense to provide an argument to turn off a few warnings (e.g. `verbose = FALSE`). You can then use this argument to omit warnings in package documentation.

:::

## Suppressing extrinsic warnings {.smaller}

Warnings from dependencies can be critical and should be dealt with ASAP.

. . .

::: {style="background-color: #E1D7C6; padding: 20px; border-radius: 25px;"}

- If dependencies are generating warnings because your package functions are using imported code in unexpected ways, you should rewrite them to remove warnings.

- If the warnings are about deprecated functions or arguments, you should switch to using the suggested alternatives. Don't wait until they are removed.

- Some warnings are unavoidable and not as important. They can be suppressed using `suppressWarnings()`. That said, avoid using it in examples in help pages, lest users think that this is part of *your* package API.

- If the warnings are coming from somewhere upstream (e.g. `{ggplot2}` → `{ggside}` → your package), you have little control over them. You can ignore such warnings using `suppressWarnings()` and remove such calls once the warnings are fixed in upstream.

:::

## Detecting warnings {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

To detect warnings, you can convert warnings into errors using `options()` and then run all your checks.

```{r, eval=FALSE}
#| code-line-numbers: false
options(warn = 2L)
```

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use GHA workflows to automate checking presence of warnings in [help pages](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/test-coverage-examples.yaml){target='_blank'}, [README](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-readme.yaml){target='_blank'}, [vignettes](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-vignette-warnings.yaml){target='_blank'}, and [tests](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-test-warnings.yaml){target='_blank'} on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- While you are at it, you might as well clean up messages. They might be harmless, but they do clog up logs and make it difficult to focus on warnings.

- If you set `warning=FALSE` in vignettes, note that this only suppresses warnings in the rendered output. When your users run this code interactively, they are still going to see the suppressed warnings. 

:::

## Checklist for exception handling {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**To reduce maintenance headaches, make sure that warnings are easily detected for further scrutiny and forthright dealt with.**

:::

:::

::::

<br>

| Item                                                     |
| :------------------------------------------------------- |
| Make sure examples in README produce no warnings.        |
| Make sure examples in help pages produce no warnings.    |
| Make sure examples in all vignettes produce no warnings. |
| Make sure tests produce no extrinsic warnings.           |

# Portability

Preventive care to make sure that package works across a variety of settings.

# "Each new user of a new system uncovers a new class of bugs."
\- Brian Kernighan

#

<!-- column layout -->

:::::{style="background-color: #A9F5A9; padding: 20px; border-radius: 25px;"}

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**For a good user experience, make sure that package would work as expected across diverse settings.**

:::

:::

::::

:::::

## The unbearable diversity of contexts {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/difference.png")
```

:::

::: {.column width='90%'}

You (the developer) may be working on the package in a certain setting: with a certain version of R, on a particular OS, in a certain locale, etc. Even if all tests pass and all examples run successfully for you locally, you can't assume that your users will use the package in similar settings. 

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

If you restrict your checks only to run on these specific settings, you may not anticipate the problems your users may experience in other settings (e.g., the graphics device that works on `windows` may not work on `macOS`, code that works with `R 4.1` may not work with `R 3.6`, etc.). 

:::{style="font-size: 20px;"}

The assumption here is that your package claims to support these settings. If your package docs clearly state that the package will work only on (e.g.) Windows, you don't need to worry about other OS.

:::

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/problem-solved.png")
```

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to make sure that your package is working as expected across various settings?**

:::

:::

::::

## Checking across multiple settings {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{rcmdcheck}`](https://r-lib.github.io/rcmdcheck/){target='_blank'} to run `R CMD check` from R.

```{r, eval=FALSE}
#| code-line-numbers: false
rcmdcheck::rcmdcheck()
```

:::{style="font-size: 20px;"}

All the options you can set to further customize this check is beyond the scope of the current presentation.

:::

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use GHA workflow to automate running `R CMD check` for multiple R versions and/or platforms (see [example workflow](https://github.com/r-lib/lintr/blob/main/.github/workflows/R-CMD-check.yaml){target='_blank'}) on each commit to discover potential portability issues.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If needed, you can run checks on additional platforms using [`{rhub}`](https://r-hub.github.io/rhub/articles/rhub.html).

- Fully crossed checks (all major platforms $\times$ all supported R versions) are rarely necessary and definitely an overkill.

- Ideally, the package should be tested until the oldest R version it purports to support. E.g. if `DESCRIPTION` says `R >= 3.4`, then you should check until `R 3.4` to make sure that the package indeed works for this R version. If you check only until `R 3.5`, it is instead better to bump version in `DESCRIPTION`.

:::

## Checklist for portability {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; text-align: center;"}

**For a good user experience, make sure that package would work as expected across diverse settings.**

:::

:::

::::

<br>

| Item                                                         |
| :----------------------------------------------------------- |
| Make sure package passes checks on commonly used OS.         |
| Make sure package passes checks on all supported R versions. |
| ...                                                          |

::: aside

The items on this list will vary significantly from package to package (e.g., does it work in different locales, with different compilers, etc.). So you can extend the list as you see fit for your workflow!

:::

<!-- # Unit testing -->

<!-- offline -->

# Code quality

Preventive care 

## styler

## lint

## Benchmarking

Touchstone framework

## Precommit



# Fail on a NOTE

# Eco-friendly workflows

Do you *really* need to run all these workflows on each commit?!

# Caveats

No good practice is dogma and there can always exist reasons to ignore it.

## 

Sometimes two concerns can conflict: more examples versus package size

# Conclusion

## Further reading {.smaller}

For more extensive discussions on best practices in R package development.

- [Writing R Extensions](https://rstudio.github.io/r-manuals/r-exts/){target="_blank"}

- Wickham, H., and Bryan, J. (2023). [*R Packages*](https://r-pkgs.org/){target="_blank"} (2nd edition). O'Reilly.

# For more

If you are interested in good programming and software development practices, check out my other [slide decks](https://sites.google.com/site/indrajeetspatilmorality/presentations){target="_blank"}.

# Acknowledgements {.smaller}

Thanks to all creators, maintainers, and contributors for the tools mentioned throughout the presentation. Without them, it won't be so easy to create robust package development architecture in R! 🙏

<br>

:::{style="background-color: #FEC868; padding: 20px; border-radius: 25px;"}

All images used in these slides have been taken from [Flaticon](www.flaticon.com){target="_blank"} by [freepikcompany](https://www.freepikcompany.com/){target="_blank"}. Huge thanks to them for making such fantastic resource freely available.

Although the current repository is published under [CC0 1.0 Universal (CC0 1.0)](https://creativecommons.org/publicdomain/zero/1.0/){target="_blank"}, this license **does not** cover  images in the `/media` folder. If you use them, you need to follow the [attribution policy](https://support.flaticon.com/s/article/Attribution-How-when-and-where-FI?language=en_US){target="_blank"} stated by Flaticon.

:::

# Find me at...

{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets){target="_blank"}

{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/){target="_blank"}

{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil){target="_blank"}

{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/){target="_blank"}

{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com){target="_blank"}

# Thank You 

And Happy Package Care! 👼

## Session information {.smaller}

```{r}
sessioninfo::session_info(include_base = TRUE)
```

