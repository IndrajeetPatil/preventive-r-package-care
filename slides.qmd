---
format:
  revealjs:
    css: style.css 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for these slides can be found [on GitHub](https://github.com/IndrajeetPatil/preventive-r-package-care/){target='_blank'}."
execute:
  echo: true
keywords: ["software-engineering", "r-packages", "best-practices", "CRAN"]
---

## Preventive Care for R Packages {style="text-align: center;"}

<!-- Don't render this file manually. Run `renderer.R` script instead. -->

::: {style="text-align: center;"}

Indrajeet Patil

:::


<!-- ::: {style="margin-top: 10em; font-size:0.75em"} -->

<!-- - [Link to slides](https://indrajeetpatil.github.io/preventive-r-package-care/) -->
<!-- - [Github repo](https://github.com/IndrajeetPatil/preventive-r-package-care/) -->

<!-- ::: -->

<!-- ![](media/plant.png){.absolute width="900" height="500" left="70" top="155"} -->

<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->
<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->

# "Software engineering ought to produce sustainability." 
\- Mark Seemann (*Code That Fits in Your Head*)

# Target audience

Specifying the intended audience early-on to check relevance of the content for you.

# Before we begin

Don't miss the forest for the trees.

## 

:::{.callout-important}

## It's not about the tools

I will rely heavily on GitHub as the hosting platform and GitHub Actions as the CI/CD framework. Even if you use neither, don't feel that this is not relevant for you.

At the end of each section, I will include a checklist with broader takeaways independent of the development tech stack. You can implement the necessary checks with the tools you prefer.

:::

:::{.callout-note}

## It's not just about CRAN

Following the recommended practices will make packages more robust to the possibility of CRAN archival, but that benefit is *incidental*.

You can follow these practices even if you never plan to submit to CRAN, since the ultimate goal is better user experience and maintainability.

:::

# Documentation

Preventive care to make sure the docs are up-to-date.

## Sources of documentation {.smaller}

Package documentation is typically scattered across the following documents.

<!-- column layout -->

:::: {.columns}

::: {.column width='30%'}

:::{style="text-align: center;"}

**README.md**

:::

```{r, echo=FALSE}
knitr::include_graphics("media/readme.png")
```

:::

::: {.column width='5%'}

:::

::: {.column width='30%'}

:::{style="text-align: center;"}

**Help pages**

:::

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='5%'}

:::

::: {.column width='30%'}

:::{style="text-align: center;"}

**Vignettes**

```{r, echo=FALSE}
knitr::include_graphics("media/application.png")
```

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; "}

**To guarantee good user experience, you need to make sure that all examples in these documents are working as expected.**

:::

This section will break down this task into subtasks and discuss each in turn.

:::

::::

# Make sure there are enough examples in the documentation.

## An example is worth a thousand words {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/research.png")
```

:::

::: {.column width='90%'}

Access to abundant examples in help pages and vignettes provides a natural starting point for users to explore and experiment with the available functionality. 

Good examples are difficult to write, but any examples are better than none.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Without enough expository examples, users are left to fumble their way into discovering rest of the available functionality.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to ensure that there are *enough* number of examples?**

:::

:::

::::

## Maintaining example code coverage {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='9%'}

<br>

{{< fa solid toolbox size=2xl >}}

:::

::: {.column width='91%'}

You can use [`{covr}`](https://covr.r-lib.org/) to compute code coverage via examples in help pages and vignettes (i.e. proportion of the source code that is executed when running these examples), and to ensure that it is above a certain threshold.

```{r, eval=FALSE}
#| code-line-numbers: false
package_coverage(type = c("examples", "vignettes"), commentDonttest = FALSE, commentDontrun = FALSE)
```

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='9%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='91%'}

You can write a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/test-coverage-examples.yaml){target='_blank'} to ensure that the code coverage via examples never drops below the chosen threshold.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- The choice of threshold is subjective and depends on how easy it is to demonstrate package functionality. Don't fall for the trap of chasing 100% code coverage here. Your time is better spent elsewhere.

- Sometimes you don't include a few vignettes in the package (because they are too large or time-consuming) by placing them in a subdirectory of `vignettes/` (e.g. `vignettes/web_only`) or by adding them to `.Rbuildignore`. These vignettes will not be included in the code coverage report. You can adjust your coverage threshold accordingly.

:::

# Make sure all README examples are working.

## README documentation {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/readme.png")
```

:::

::: {.column width='90%'}

`README.md` provides a quick overview of the package API and can feature examples of key functions. 

Although breaking changes might be infrequent, when they do occur, the code in README may become defunct.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

`README.md` is probably the first and the most-visited document in a project and any broken examples therein is bound to confuse many users.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to insure against broken code in README?**

:::

:::

::::

## Detecting broken README examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid toolbox size=2xl >}}

:::

::: {.column width='90%'}

You can use [`{rmarkdown}`](https://rmarkdown.rstudio.com/github_document_format.html) to dynamically generate `README.md` from `README.Rmd`. If there is broken code in README, it will fail to render.

```{r, eval=FALSE}
#| code-line-numbers: false
rmarkdown::render("README.md", output_format = rmarkdown::github_document())
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-readme.yaml){target='_blank'} to check that README can be successfully rendered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If you are starting a new project, create README using [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html).

- If you need to convert your existing `.md` to `.Rmd`, you are [currently](https://github.com/yihui/knitr/issues/1807) out of luck. You will need to do this manually.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).

:::

# Make sure *all* examples in help pages are working.

## Non-working examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of examples

Help pages for exported (and key internal) functions should contain examples (`\examples{}` Rd tag) that showcase how functions are to be used. But you may choose to skip running some examples (e.g. because they are time-consuming). In particular, R allows following tags to conditionally evaluate examples:

|      Tag      | Run by `example()`? | Run by `R CMD check`? |
| :-----------: | :-----------------: | :-------------------: |
| `\dontrun{}`  |         ❌          |          ❌           |
| `\donttest{}` |         ✅          |          ❌           |
| `\dontshow{}` |         ✅          |          ✅           |

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

This means that `\dontrun{}` and `\donttest{}` examples might not be working, and yet may never be caught by `R CMD check`. But users will still see these examples, and wonder why they aren't working for them.

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to catch examples that don't run successfully?**

:::

:::

::::

## Checking all examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid toolbox size=2xl >}}

:::

::: {.column width='90%'}

Examples document, *and* provide test code used for diagnostic checking. You can use [`{devtools}`](https://r-lib.github.io/devtools/) to run examples and then fix the broken ones.

```{r, eval=FALSE}
#| code-line-numbers: false
devtools::run_examples(run_dontrun = TRUE, run_donttest = TRUE)
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-all-examples.yaml){target='_blank'} to make sure all examples in help pages are working on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Examples that are *meant* to fail should use any of the following patterns:

    * `if (FALSE) { ... }` (if example is included only for illustrative purposes)
    * `try({ ... })` (if the intent is to show the error)

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).

:::

# Ensure *all* HTML in the help pages is valid.

## HTML5 check

# Ensure *all* URLs are valid.

## What is link rot? {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid link-slash size=2xl >}}

:::

::: {.column width='90%'}

If the package documentation includes hyperlinks to external resources, make sure that they are still valid and not dangling.

[Link rot](https://en.wikipedia.org/wiki/Link_rot){target='_blank'} happens because web pages move to new addresses or become permanently unavailable.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Such dangling references can be frustrating for the users trying to access the resources that the dead links were previously pointing to.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to prevent link rot from accumulating?**

:::

:::

::::

## Detecting link rot {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid toolbox size=2xl >}}

:::

::: {.column width='90%'}

You can use [`{urlchecker}`](https://r-lib.github.io/urlchecker/) to detect dead web references and their locations in the documentation. Fixing these links is then straightforward.

```{r, eval=FALSE}
#| code-line-numbers: false
urlchecker::url_check()
```


:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a GHA workflow to automate URL checking (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-link-rot.yaml){target='_blank'}). This will ensure that bad URLs will be discovered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If `{urlchecker}` finds dead URLs in `.html`/`.md` files, you will need to update `.Rmd`/`.qmd` files and then regenerate the docs. Otherwise, you will keep wondering why `urlchecker::url_update()` isn't fixing the links.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).

- There can be false positives sometimes because a server is temporarily down. Re-triggering the workflow can help.

:::


## Spell check

## Checklist for documentation

# Dependency management

## "noSuggests" check

## "noSuggests" pkgdown

# Unit testing

# Turn warnings into errors

# Precommit

# Benchmarking

Touchstone framework

# Check against devel versions of dependencies

# Check on multiple R versions and platforms

# Fail on NOTE

# Eco-friendly workflows

Do you *really* need to run all these workflows on each commit?!

# Conclusion



# For more

If you are interested in good programming and software development practices, check out my other [slide decks](https://sites.google.com/site/indrajeetspatilmorality/presentations){target="_blank"}.

# Acknowledgements {.smaller}

All images used in these slides have been taken from [Flaticon](www.flaticon.com){target="_blank"} by [freepikcompany](https://www.freepikcompany.com/){target="_blank"}. Huge thanks to them for making such fantastic resource freely available to the community.

Although the current repository is published under [CC0 1.0 Universal (CC0 1.0)](https://creativecommons.org/publicdomain/zero/1.0/){target="_blank"}, this license **does not** cover  images in the `/media` folder. If you use them, you need to follow the [attribution policy](https://support.flaticon.com/s/article/Attribution-How-when-and-where-FI?language=en_US){target="_blank"} stated by Flaticon.

# Find me at...

{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets){target="_blank"}

{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/){target="_blank"}

{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil){target="_blank"}

{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/){target="_blank"}

{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com){target="_blank"}

# Thank You 

And Happy Package Care! 👼

## Session information {.smaller}

```{r}
sessioninfo::session_info(include_base = TRUE)
```

