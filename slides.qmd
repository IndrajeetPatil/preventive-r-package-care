---
format:
  revealjs:
    css: style.css 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for these slides can be found [on GitHub](https://github.com/IndrajeetPatil/preventive-r-package-care/){target='_blank'}."
execute:
  echo: true
keywords: ["software-engineering", "r-packages", "best-practices", "CRAN"]
---

## Preventive Care for R Packages {style="text-align: center;"}

<!-- Don't render this file manually. Run `renderer.R` script instead. -->

::: {style="text-align: center;"}

Indrajeet Patil

:::


<!-- ::: {style="margin-top: 10em; font-size:0.75em"} -->

<!-- - [Link to slides](https://indrajeetpatil.github.io/preventive-r-package-care/) -->
<!-- - [Github repo](https://github.com/IndrajeetPatil/preventive-r-package-care/) -->

<!-- ::: -->

<!-- ![](media/plant.png){.absolute width="900" height="500" left="70" top="155"} -->

<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->
<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->

# "Software engineering ought to produce sustainability." 
\- Mark Seemann (*Code That Fits in Your Head*)

# Target audience

Specifying the intended audience early-on to check relevance of the content for you.

# Before we begin

Don't miss the forest for the trees.

## 

:::{.callout-important}

## It's not about the tools

I will rely heavily on GitHub as the hosting platform and GitHub Actions as the CI/CD framework. Even if you use neither, don't feel that this is not relevant for you.

At the end of each section, I will include a checklist with broader takeaways independent of the development tech stack. You can implement the necessary checks with the tools you prefer.

:::

:::{.callout-note}

## It's not just about CRAN

Following the recommended practices will make packages more robust to the possibility of CRAN archival, but that benefit is *incidental*.

You can follow these practices even if you never plan to submit to CRAN, since the ultimate goal is better user experience and maintainability.

:::

## Iconography {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='40%'}

Bad user experience

:::

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='40%'}

Maintenance nightmare

:::

::::


<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='40%'}

Tool

:::

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='40%'}

Automation

:::

::::

# Documentation

Preventive care to make sure the docs are up-to-date.

# "Incorrect documentation is often worse than no documentation."
\- Bertrand Meyer

## Sources of documentation {.smaller}

Package documentation is typically scattered across the following documents.

<!-- column layout -->

:::: {.columns}

::: {.column width='30%'}

:::{style="text-align: center;"}

**README.md**

:::

```{r, echo=FALSE}
knitr::include_graphics("media/readme.png")
```

:::

::: {.column width='5%'}

:::

::: {.column width='30%'}

:::{style="text-align: center;"}

**Help pages**

:::

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='5%'}

:::

::: {.column width='30%'}

:::{style="text-align: center;"}

**Vignettes**

```{r, echo=FALSE}
knitr::include_graphics("media/application.png")
```

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/target.png")
```

:::

::: {.column width='90%'}

:::{style="color: blue; "}

**To guarantee good user experience, you need to make sure that all examples in these documents are working as expected.**

:::

This section will break down this task into subtasks and discuss each in turn.

:::

::::

# Make sure there are enough examples in the documentation.

## An example is worth a thousand words {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/research.png")
```

:::

::: {.column width='90%'}

Access to abundant examples in help pages and vignettes provides a natural starting point for users to explore and experiment with the available functionality. 

Good examples are difficult to write, but any examples are better than none.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Without enough expository examples, users are left to fumble their way into discovering rest of the available functionality.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to ensure that there are *enough* number of examples?**

:::

:::

::::

## Maintaining example code coverage {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='9%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='91%'}

Use [`{covr}`](https://covr.r-lib.org/){target='_blank'} to compute example code coverage (i.e. proportion of the source code that is executed when running examples in help pages and vignettes), and to ensure that it is above a certain threshold.

```{r, eval=FALSE}
#| code-line-numbers: false
package_coverage(type = c("examples", "vignettes"), commentDonttest = FALSE, commentDontrun = FALSE)
```

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='9%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='91%'}

Use a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/test-coverage-examples.yaml){target='_blank'} to ensure that the code coverage via examples never drops below the chosen threshold.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- The choice of threshold is subjective and context-sensitive. Chasing after 100% example code coverage is futile.

- Vignettes not included in the package (by placing them in a `vignettes/` subdirectory or by adding them to `.Rbuildignore`) will not contribute towards the code coverage. You can adjust your coverage threshold accordingly.

- You can choose a threshold on a package-basis or on a file-basis (`covr::file_coverage()`).

:::

# Make sure all README examples are working.

## README documentation {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/readme.png")
```

:::

::: {.column width='90%'}

`README.md` provides a quick overview of the package API and can feature examples of key functions. 

Although breaking changes might be infrequent, when they do occur, the code in README may become defunct.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

`README.md` is probably the first and the most-visited document in a project and any broken examples therein is bound to confuse many users.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to insure against broken code in README?**

:::

:::

::::

## Detecting broken README examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{rmarkdown}`](https://rmarkdown.rstudio.com/github_document_format.html) to dynamically generate `README.md` from `README.Rmd`. If there is broken code in README, it will fail to render.

```{r, eval=FALSE}
#| code-line-numbers: false
rmarkdown::render("README.md", output_format = rmarkdown::github_document())
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-readme.yaml){target='_blank'} to check that README can be successfully rendered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If you are starting a new project, create README using [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html).

- If you need to convert your existing `.md` to `.Rmd`, you are [currently](https://github.com/yihui/knitr/issues/1807) out of luck. You will need to do this manually.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule){target='_blank'} (e.g. once a week).

:::

# Make sure *all* examples in help pages are working.

## Non-working examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/example.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of examples

Help pages for exported (and key internal) functions should contain examples (`\examples{}` Rd tag) that showcase how functions are to be used. But you may choose to skip running some examples (e.g. because they are time-consuming). In particular, R allows following tags to conditionally evaluate examples:

|      Tag      | Run by `example()`? | Run by `R CMD check`? |
| :-----------: | :-----------------: | :-------------------: |
| `\dontrun{}`  |         ❌          |          ❌           |
| `\donttest{}` |         ✅          |          ❌           |
| `\dontshow{}` |         ✅          |          ✅           |

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

This means that `\dontrun{}` and `\donttest{}` examples might not be working, and yet may never be caught by `R CMD check`. But users will still see these examples, and wonder why they aren't working for them.

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to catch examples that don't run successfully?**

:::

:::

::::

## Checking all examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{devtools}`](https://r-lib.github.io/devtools/){target='_blank'} to run all examples. You can then fix the broken ones.

```{r, eval=FALSE}
#| code-line-numbers: false
devtools::run_examples(run_dontrun = TRUE, run_donttest = TRUE)
```

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use a [GHA workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-all-examples.yaml){target='_blank'} to make sure all examples in help pages are working on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Examples that are *meant* to fail should use any of the following patterns:

    * `if (FALSE) { ... }` (if example is included only for illustrative purposes)
    * `try({ ... })` (if the intent is to show the error)

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger){target='_blank'}  (e.g. once a week).

:::

# Make sure examples in *all* vignettes are working.

## Vignette examples {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/application.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Types of vignettes

Vignettes included in package will fail if any of the examples are not working. But you may choose not to include all vignettes (by placing them in a `vignettes/` subdirectory or by adding them to `.Rbuildignore`). This can be because of their size (e.g. if you are including media) or because they are too time-consuming (e.g. if you are running statistical models).

:::

:::

::::

. . . 

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='90%'}

This means that examples in excluded vignettes might not be working, and yet may never be caught by `R CMD check`. Although users might not be exposed to them on CRAN, as a maintainer, you'd still like to not have defunct examples in the documentation.

:::

::::

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to detect broken examples in excluded vignettes?**

:::

:::

::::

## Building all vignettes {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Although excluded vignettes may not be checked by `R CMD check`, they are still built by [`{pkgdown}`](https://r-lib.github.io/pkgdown/) to generate a static website. This would detect any broken examples.

```{r, eval=FALSE}
#| code-line-numbers: false
pkgdown::build_site()
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

Use a [GHA workflow](https://github.com/r-lib/actions/blob/v2-branch/examples/pkgdown.yaml){target='_blank'} to make sure examples in *all* vignettes are working on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Code chunks that are *meant* to fail should use `error=TRUE` option.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule){target='_blank'} (e.g. once a week).

:::

# Ensure *all* URLs are valid.

## What is link rot? {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

{{< fa solid link-slash size=2xl >}}

:::

::: {.column width='90%'}

If the package documentation includes hyperlinks to external resources, make sure that they are still valid and not dangling.

[Link rot](https://en.wikipedia.org/wiki/Link_rot){target='_blank'} happens because web pages move to new addresses or become permanently unavailable.

:::

:::: 

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Such dangling references can be frustrating for the users trying to access the resources that the dead links were previously pointing to.

:::

::::

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to prevent link rot from accumulating?**

:::

:::

::::


## Detecting link rot {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

You can use [`{urlchecker}`](https://r-lib.github.io/urlchecker/){target='_blank'} to detect dead web references and their locations in the documentation. Fixing these links is then straightforward.

```{r, eval=FALSE}
#| code-line-numbers: false
urlchecker::url_check()
```

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a GHA workflow to automate URL checking (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-link-rot.yaml){target='_blank'}). This will ensure that bad URLs will be discovered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- If `{urlchecker}` finds dead URLs in `.html`/`.md` files, you will need to update `.Rmd`/`.qmd` files and then regenerate the docs. Otherwise, you will keep wondering why `urlchecker::url_update()` isn't fixing the links.

- If the repo is not under active development, you can run the workflow on a [scheduled time](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) (e.g. once a week).

- There can be false positives sometimes because a server is temporarily down. Re-triggering the workflow can help.

:::

# Make sure there are no spelling mistakes.

## Spelling mistakes {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/spell-check.png")
```

:::

::: {.column width='90%'}

Spelling mistakes are a part of life, especially if you are not a native English speaker. Left unchecked, they can accumulate to a serious degree.

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/confused.png")
```

:::

::: {.column width='90%'}

Spelling mistakes obvious to native speakers may not be so for non-native speakers, who will be frustrated that they can't find meaning of the misspelled word. Additionally, misspelling technical words (e.g. writing *innode* instead of [*inode*](https://en.wikipedia.org/wiki/Inode){target='_blank'}) can lead users down wrong path and waste their time. 

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to prevent spelling mistakes from accumulating in the documentation?**

:::

:::

::::

## Creating a list of allowed misspellings {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='70%'}

There exist multiple English spelling standards (e.g. in British English: *anaemia*, but in American English: *anemia*). You can specify your preferred standard in `DESCRIPTION`.

:::

::: {.column width='30%'}

E.g. for British English

```dcf
Language: en-GB
```

:::

::::

. . . 

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='60%'}

Additionally, some technical words will not be recognized by dictionaries, but you don't want these to be considered spelling mistakes either. You can create a list of allowed misspelled words in `WORDLIST` file.

:::

::: {.column width='20%'}

File location

```
├── DESCRIPTION
├── inst
│   └── WORDLIST
```

:::

::: {.column width='20%'}

Example file

```
addin
api
AppVeyor
biocthis
bootswatch
...
winbuilder
YAML
```

:::

::::

. . . 

<br>

Now you are all set for detecting spelling mistakes!

## Detecting spelling mistakes {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/toolbox.png")
```

:::

::: {.column width='90%'}

Use [`{spelling}`](https://docs.ropensci.org/spelling/){target='_blank'} to detect misspelled words and their location in the docs.

```{r, eval=FALSE}
#| code-line-numbers: false
spelling::spell_check_package()
```

:::

::::

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/robot.png")
```

:::

::: {.column width='90%'}

You can write a GHA workflow to automate URL checking (see [example workflow](https://github.com/IndrajeetPatil/statsExpressions/blob/main/.github/workflows/check-spelling.yaml){target='_blank'}). This will ensure that spelling mistakes will be discovered on each commit.

:::

::::

. . .

:::{.callout-tip}

## Additional tips 

- Instead of a GHA workflow, you can also include spell check tests in the package itself. For more, see `usethis::use_spell_check()`.

- If you install [Grammarly desktop](https://www.grammarly.com/desktop), it will flag spelling mistakes and will even suggest a clearer way to phrase your sentences. For VS Code, check out [Grammarly extension](https://marketplace.visualstudio.com/items?itemName=znck.grammarly).

:::

# Ensure *all* HTML in the help pages is valid.

## HTML5 check

## Checklist for documentation

# Dependency management

Preventive care to make sure that all suggested (aka weak or soft) dependencies are used conditionally.

# Make sure soft dependencies are used conditionally.

## Dependencies {.smaller}

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

<br>

```{r, echo=FALSE}
knitr::include_graphics("media/trust.png")
```

:::

::: {.column width='90%'}

:::{.callout-note}

## Hard versus soft dependencies

Dependencies are inevitable, but some more so than others.

| Dependency |  In `DESCRIPTION`   |                      Connection                      |
| :--------: | :-----------------: | :--------------------------------------------------: |
|    Hard    | `Depends`/`Imports` |    Impossible for package to work without these.     |
|    Soft    |     `Suggests`      | Nice to have but your package will work nonetheless. |

:::

:::

::::

<br>

. . .

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

```{r, echo=FALSE}
knitr::include_graphics("media/headache.png")
```

:::

::: {.column width='90%'}

If weak dependencies are no longer available (due to archival, e.g.), this can lead to failures in your package. Given that these are optional dependencies, such failures should be avoided by using weak dependencies conditionally.

:::

::::

. . .

<br>

<!-- column layout -->

:::: {.columns}

::: {.column width='10%'}

{{< fa regular circle-question size=2xl >}}

:::

::: {.column width='90%'}

::: {style="color: red;"}

**How to make sure weak dependencies are being conditionally used?**

:::

:::

::::


## "noSuggests" check

# Again, make sure soft dependencies are used conditionally.

## "noSuggests" pkgdown



# Unit testing

offline

# "There is a problem with warnings. No one reads them." 
\- Patrick Burns (*R Inferno*)

## {.smaller}

Turn warnings into errors

# Precommit

# Benchmarking

Touchstone framework

# Check against devel versions of dependencies

# Check on multiple R versions and platforms

# Fail on NOTE

# Eco-friendly workflows

Do you *really* need to run all these workflows on each commit?!

# Conclusion



# For more

If you are interested in good programming and software development practices, check out my other [slide decks](https://sites.google.com/site/indrajeetspatilmorality/presentations){target="_blank"}.

# Acknowledgements {.smaller}

All images used in these slides have been taken from [Flaticon](www.flaticon.com){target="_blank"} by [freepikcompany](https://www.freepikcompany.com/){target="_blank"}. Huge thanks to them for making such fantastic resource freely available to the community.

Although the current repository is published under [CC0 1.0 Universal (CC0 1.0)](https://creativecommons.org/publicdomain/zero/1.0/){target="_blank"}, this license **does not** cover  images in the `/media` folder. If you use them, you need to follow the [attribution policy](https://support.flaticon.com/s/article/Attribution-How-when-and-where-FI?language=en_US){target="_blank"} stated by Flaticon.

# Find me at...

{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets){target="_blank"}

{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/){target="_blank"}

{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil){target="_blank"}

{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/){target="_blank"}

{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com){target="_blank"}

# Thank You 

And Happy Package Care! 👼

## Session information {.smaller}

```{r}
sessioninfo::session_info(include_base = TRUE)
```

